--- FILE: .env ---
---
--- FILE: .vscode/settings.json ---
{
    "IDX.aI.enableInlineCompletion": true,
    "IDX.aI.enableCodebaseIndexing": true
}
---
--- FILE: README.md ---
# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.

---
--- FILE: apphosting.yaml ---
# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1

---
--- FILE: components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
---
--- FILE: next.config.ts ---
import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;

---
--- FILE: package.json ---
{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "concurrently \"npm:dev:next\" \"npm:dev:genkit\"",
    "dev:next": "next dev --turbopack --port 9002",
    "dev:genkit": "CI=true genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.8.0",
    "@genkit-ai/next": "^1.8.0",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-autoplay": "^8.1.5",
    "embla-carousel-react": "^8.1.5",
    "firebase": "^11.9.1",
    "framer-motion": "^11.2.10",
    "genkit": "^1.8.0",
    "googleapis": "^140.0.1",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "concurrently": "^8.2.2",
    "genkit-cli": "^1.8.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
---
--- FILE: src/ai/dev.ts ---
'use server';

import { config } from 'dotenv';
config();

import '@/ai/flows/telegram-bot-integration.ts';
import '@/ai/flows/telegram-bot-responder.ts';
// AI generative flows have been removed.
import '@/ai/flows/create-drive-folder.ts';
import '@/ai/flows/verify-telegram-bot.ts';
---
--- FILE: src/ai/flows/create-drive-folder.ts ---
'use server';

/**
 * @fileOverview Implements a Genkit flow for creating a real Google Drive folder.
 *
 * - createOrderFolder - Creates a folder for a given order in Google Drive.
 * - CreateOrderFolderInput - The input type for the createOrderFolder function.
 * - CreateOrderFolderOutput - The return type for the createOrderFolder function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import {google} from 'googleapis';

const CreateOrderFolderInputSchema = z.object({
  orderId: z.string().describe('The ID of the order.'),
  customerName: z.string().describe('The name of the customer.'),
  folderTemplate: z.string().describe('The template for the folder name, e.g., "[OrderID] - [CustomerName]".'),
});
export type CreateOrderFolderInput = z.infer<typeof CreateOrderFolderInputSchema>;

const CreateOrderFolderOutputSchema = z.object({
  success: z.boolean().describe('Whether the folder was created successfully.'),
  folderName: z.string().describe('The name of the created folder.'),
  folderId: z.string().optional().describe('The ID of the created Google Drive folder.'),
  folderUrl: z.string().optional().describe('The URL to access the created Google Drive folder.'),
  error: z.string().optional().describe('Error message if the operation failed.'),
});
export type CreateOrderFolderOutput = z.infer<typeof CreateOrderFolderOutputSchema>;

export async function createOrderFolder(input: CreateOrderFolderInput): Promise<CreateOrderFolderOutput> {
  return createOrderFolderFlow(input);
}

const createOrderFolderFlow = ai.defineFlow(
  {
    name: 'createOrderFolderFlow',
    inputSchema: CreateOrderFolderInputSchema,
    outputSchema: CreateOrderFolderOutputSchema,
  },
  async (input) => {
    const serviceAccountJson = process.env.DRIVE_SERVICE_ACCOUNT_JSON;
    const parentFolderId = process.env.DRIVE_PARENT_FOLDER_ID;

    if (!serviceAccountJson) {
      const errorMsg = 'DRIVE_SERVICE_ACCOUNT_JSON environment variable is not set.';
      console.error(errorMsg);
      return { success: false, folderName: '', error: errorMsg };
    }
    
    if (!parentFolderId) {
       const errorMsg = 'DRIVE_PARENT_FOLDER_ID environment variable is not set.';
       console.error(errorMsg);
       return { success: false, folderName: '', error: errorMsg };
    }

    try {
        const credentials = JSON.parse(serviceAccountJson);
        const auth = new google.auth.JWT(
            credentials.client_email,
            undefined,
            credentials.private_key,
            ['https://www.googleapis.com/auth/drive']
        );

        const drive = google.drive({ version: 'v3', auth });

        const folderName = input.folderTemplate
            .replace('[OrderID]', input.orderId)
            .replace('[CustomerName]', input.customerName);

        const fileMetadata = {
            name: folderName,
            mimeType: 'application/vnd.google-apps.folder',
            parents: [parentFolderId],
        };

        const file = await drive.files.create({
            requestBody: fileMetadata,
            fields: 'id, webViewLink',
        });
        
        console.log(`Successfully created folder in Google Drive. ID: ${file.data.id}`);

        return { 
            success: true,
            folderName: folderName,
            folderId: file.data.id || '',
            folderUrl: file.data.webViewLink || '',
        };
    } catch (error: any) {
      console.error('Error creating Google Drive folder:', error);
      const errorMessage = error.response?.data?.error?.message || error.message || 'An unexpected error occurred.';
      return { 
        success: false,
        folderName: '',
        error: `Google Drive API Error: ${errorMessage}`,
      };
    }
  }
);
---
--- FILE: src/ai/flows/sync-from-sheet.ts ---
'use server';

/**
 * @fileOverview Implements a Genkit flow for syncing order data from a Google Sheet webhook.
 * 
 * - syncOrderFromSheet - Receives order data, validates it, and prepares it for saving to Firebase.
 * - SyncOrderFromSheetInput - The input type for the syncOrderFromSheet function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
// We'll import the Telegram flow to send notifications later.
// import { sendTelegramUpdate } from './telegram-bot-integration';

// This schema should match the columns in your Google Sheet exactly.
const SyncOrderFromSheetInputSchema = z.object({
  kode_order: z.string(),
  nama_klien: z.string(),
  status_pesanan: z.string(),
  tipe_pembayaran: z.string(),
  jumlah_transfer: z.coerce.number(),
  total_harga: z.coerce.number(),
  potongan_refund: z.coerce.number().optional().default(0),
  jenis_potongan: z.string().optional().default(''),
  total_refund: z.coerce.number().optional().default(0),
  status_refund: z.string().optional().default(''),
  timestamp: z.string(),
});
export type SyncOrderFromSheetInput = z.infer<typeof SyncOrderFromSheetInputSchema>;

export async function syncOrderFromSheet(input: SyncOrderFromSheetInput): Promise<{ success: boolean }> {
  return syncOrderFromSheetFlow(input);
}

const syncOrderFromSheetFlow = ai.defineFlow(
  {
    name: 'syncOrderFromSheetFlow',
    inputSchema: SyncOrderFromSheetInputSchema,
    outputSchema: z.object({ success: z.boolean() }),
  },
  async (orderData) => {
    console.log(`Processing order sync for: ${orderData.kode_order}`);

    // **PHASE 1: Save to Firebase**
    // In a real implementation, we would use the Firebase Admin SDK here
    // to write `orderData` to Firestore or Realtime Database.
    // For now, we'll just log it to the console.
    console.log('Simulating save to Firebase:', orderData);


    // **PHASE 2: Trigger Notifications (Optional)**
    // Here, we could check if the status has changed and if so,
    // call the `sendTelegramUpdate` flow.
    // Example:
    // const previousStatus = await getPreviousStatusFromFirebase(orderData.kode_order);
    // if (orderData.status_pesanan !== previousStatus) {
    //   await sendTelegramUpdate({
    //     telegramId: '@some_id_from_db', // We would fetch this from our customer database
    //     message: `Update Pesanan ${orderData.kode_order}: Status Anda sekarang adalah *${orderData.status_pesanan}*`,
    //   });
    // }
    
    console.log(`Successfully synced order ${orderData.kode_order}.`);

    return { success: true };
  }
);
---
--- FILE: src/ai/flows/telegram-bot-integration.ts ---
'use server';

/**
 * @fileOverview Implements a Genkit flow for sending order updates and payment reminders via Telegram.
 *
 * - sendTelegramUpdate - Sends a message to a Telegram user with order details.
 * - SendTelegramUpdateInput - The input type for the sendTelegramUpdate function.
 * - SendTelegramUpdateOutput - The return type for the sendTelegramUpdate function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SendTelegramUpdateInputSchema = z.object({
  telegramId: z.string().describe('The Telegram user ID or @username to send the message to.'),
  message: z.string().describe('The message to send to the user.'),
  orderId: z.string().optional().describe('The ID of the order, if applicable.'),
  botToken: z.string().optional().describe('The Telegram Bot Token to use. If not provided, it will use the one from environment variables.'),
});
export type SendTelegramUpdateInput = z.infer<typeof SendTelegramUpdateInputSchema>;

const SendTelegramUpdateOutputSchema = z.object({
  success: z.boolean().describe('Whether the message was sent successfully.'),
  error: z.string().optional().describe('Error message if the update failed.'),
});
export type SendTelegramUpdateOutput = z.infer<typeof SendTelegramUpdateOutputSchema>;

export async function sendTelegramUpdate(input: SendTelegramUpdateInput): Promise<SendTelegramUpdateOutput> {
  return sendTelegramUpdateFlow(input);
}

const sendTelegramUpdateFlow = ai.defineFlow(
  {
    name: 'sendTelegramUpdateFlow',
    inputSchema: SendTelegramUpdateInputSchema,
    outputSchema: SendTelegramUpdateOutputSchema,
  },
  async (input) => {
    const botToken = input.botToken || process.env.TELEGRAM_BOT_TOKEN;

    if (!botToken) {
      const errorMsg = 'TELEGRAM_BOT_TOKEN is not set in environment variables or passed directly.';
      console.error(errorMsg);
      return { success: false, error: errorMsg };
    }

    try {
      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
      
      let fullMessage = input.message;
      if (input.orderId) {
          fullMessage += `\n\nOrder ID: ${input.orderId}`;
      }
      
      const response = await fetch(telegramApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: input.telegramId,
          text: fullMessage,
          parse_mode: 'Markdown',
        }),
      });

      const data = await response.json();

      if (!data.ok) {
        const errorMessage = data.description || 'Unknown error';
        console.error(`Telegram API error: ${errorMessage}`, data);
        return { success: false, error: `Telegram API Error: ${errorMessage}` };
      }

      return { success: true };

    } catch (error: any) {
      console.error('Error sending Telegram update:', error);
      return { success: false, error: error.message || 'An unexpected error occurred.' };
    }
  }
);
---
--- FILE: src/ai/flows/telegram-bot-responder.ts ---
'use server';

/**
 * @fileOverview Implements a Genkit flow for responding to incoming Telegram messages.
 * This file is triggered by a webhook from Telegram.
 * - processTelegramWebhook - Processes a webhook call from Telegram.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import { sendTelegramUpdate } from './telegram-bot-integration';

// This schema defines the part of the Telegram webhook payload we care about.
const TelegramWebhookPayloadSchema = z.object({
  message: z.object({
    text: z.string().optional(),
    chat: z.object({
      id: z.number(),
    }),
  }),
});
export type TelegramWebhookPayload = z.infer<typeof TelegramWebhookPayloadSchema>;

export async function processTelegramWebhook(payload: TelegramWebhookPayload): Promise<{ success: boolean }> {
  return processTelegramWebhookFlow(payload);
}

const processTelegramWebhookFlow = ai.defineFlow(
  {
    name: 'processTelegramWebhookFlow',
    inputSchema: TelegramWebhookPayloadSchema,
    outputSchema: z.object({ success: z.boolean() }),
  },
  async (payload) => {
    const chatId = payload.message?.chat?.id;
    const text = payload.message?.text?.trim();

    if (!chatId || !text) {
      console.log('Webhook received without chat ID or text. Ignoring.');
      return { success: true }; // Success to avoid Telegram retries
    }

    // Only respond to the /start command for now.
    if (text.toLowerCase() === '/start') {
      const welcomeMessage = `Selamat datang di Urgent Studio Bot! 🤖\n\nSaya akan mengirimkan notifikasi penting seputar pesanan Anda di sini.\n\n*Chat ID Anda:* \`${chatId}\`\n\nSilakan gunakan Chat ID ini di panel admin jika Anda adalah admin, atau berikan kepada kami jika diminta.`;

      try {
        await sendTelegramUpdate({
          telegramId: String(chatId),
          message: welcomeMessage,
        });
      } catch (e) {
        console.error("Failed to send welcome message:", e);
        // Don't re-throw, just log.
      }
    }

    return { success: true };
  }
);
---
--- FILE: src/ai/flows/verify-telegram-bot.ts ---
'use server';

/**
 * @fileOverview Implements a Genkit flow for verifying the Telegram Bot Token.
 *
 * - verifyTelegramBot - Checks if the bot token is valid by calling the getMe endpoint.
 * - VerifyTelegramBotInput - The input type for the verifyTelegramBot function.
 * - VerifyTelegramBotOutput - The return type for the verifyTelegramBot function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

const VerifyTelegramBotInputSchema = z.object({
  botToken: z.string().describe('The Telegram Bot Token to verify.'),
});
export type VerifyTelegramBotInput = z.infer<typeof VerifyTelegramBotInputSchema>;


const VerifyTelegramBotOutputSchema = z.object({
  success: z.boolean().describe('Whether the token is valid.'),
  botName: z.string().optional().describe('The username of the bot if successful.'),
  error: z.string().optional().describe('Error message if the verification failed.'),
});
export type VerifyTelegramBotOutput = z.infer<typeof VerifyTelegramBotOutputSchema>;

export async function verifyTelegramBot(input: VerifyTelegramBotInput): Promise<VerifyTelegramBotOutput> {
  return verifyTelegramBotFlow(input);
}

const verifyTelegramBotFlow = ai.defineFlow(
  {
    name: 'verifyTelegramBotFlow',
    inputSchema: VerifyTelegramBotInputSchema,
    outputSchema: VerifyTelegramBotOutputSchema,
  },
  async ({ botToken }) => {

    if (!botToken) {
      const errorMsg = 'Bot Token is required for verification.';
      console.error(errorMsg);
      return { success: false, error: errorMsg };
    }

    try {
      const telegramApiUrl = `https://api.telegram.org/bot${botToken}/getMe`;
      
      const response = await fetch(telegramApiUrl);
      const data = await response.json();

      if (data.ok) {
        return { success: true, botName: data.result.username };
      } else {
        return { success: false, error: data.description || 'Token tidak valid.' };
      }

    } catch (error: any) {
      console.error('Error verifying Telegram token:', error);
      return { success: false, error: error.message || 'An unexpected error occurred.' };
    }
  }
);
---
--- FILE: src/ai/genkit.ts ---
import {genkit, type GenkitPlugin} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

const plugins: GenkitPlugin[] = [];

// The googleAI() plugin is conditionally enabled to prevent startup errors.
// To use generative AI features, you must:
// 1. Get a Google AI API key from https://aistudio.google.com/app/apikey
// 2. Add it to the .env file as: GEMINI_API_KEY="YOUR_API_KEY_HERE"
// The application will run without the key, but AI features will be disabled.
if (process.env.GEMINI_API_KEY) {
  plugins.push(googleAI());
}

export const ai = genkit({
  plugins,
});
---
--- FILE: src/app/admin/analytics/page.tsx ---
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { Bar, BarChart, CartesianGrid, XAxis, YAxis, Line, LineChart, ResponsiveContainer } from "recharts"
import { TrendingUp, ArrowDown, Users, ShoppingCart, DollarSign, Percent } from 'lucide-react';
import { formatRupiah } from '@/lib/utils';

const revenueData = [
  { month: 'Jan', revenue: 12300000 },
  { month: 'Feb', revenue: 15500000 },
  { month: 'Mar', revenue: 14200000 },
  { month: 'Apr', revenue: 18900000 },
  { month: 'May', revenue: 21300000 },
  { month: 'Jun', revenue: 19800000 },
];

const chartConfig = {
  revenue: {
    label: "Revenue",
    color: "hsl(var(--primary))",
  },
  visitors: {
    label: "Visitors",
    color: "hsl(var(--chart-1))",
  },
  orders: {
    label: "Orders",
    color: "hsl(var(--chart-2))",
  },
}

export default function AdminAnalyticsPage() {
  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Analytics Dashboard</h1>
        <p className="text-muted-foreground">Wawasan mendalam tentang performa bisnis Anda.</p>
      </div>

      <section>
        <h2 className="text-xl font-semibold mb-4 text-foreground/80">Revenue Analytics</h2>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
              <DollarSign className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{formatRupiah(15500000)}</div>
              <p className="text-xs text-muted-foreground flex items-center gap-1">
                <TrendingUp className="h-3 w-3 text-green-500" />
                +23% vs bulan lalu
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Avg. Order Value</CardTitle>
              <ShoppingCart className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{formatRupiah(425000)}</div>
               <p className="text-xs text-muted-foreground flex items-center gap-1">
                <ArrowDown className="h-3 w-3 text-red-500" />
                -5% vs bulan lalu
              </p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Customer Lifetime Value</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{formatRupiah(1200000)}</div>
              <p className="text-xs text-muted-foreground">Estimasi pendapatan per customer</p>
            </CardContent>
          </Card>
        </div>
      </section>

      <Card>
        <CardHeader>
            <CardTitle>Grafik Pendapatan Bulanan</CardTitle>
            <CardDescription>Pendapatan dalam 6 bulan terakhir.</CardDescription>
        </CardHeader>
        <CardContent>
            <ChartContainer config={chartConfig} className="h-[300px] w-full">
                <LineChart data={revenueData} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>
                    <CartesianGrid strokeDasharray="3 3" vertical={false} />
                    <XAxis dataKey="month" tickLine={false} axisLine={false} tickMargin={8} />
                    <YAxis 
                      tickFormatter={(value) => `${(value as number) / 1000000} Jt`}
                      tickLine={false}
                      axisLine={false}
                      tickMargin={8}
                      width={50}
                    />
                    <ChartTooltip 
                      cursor={false}
                      content={<ChartTooltipContent 
                        formatter={(value) => formatRupiah(value as number)} 
                        indicator="line" 
                      />}
                    />
                    <Line type="monotone" dataKey="revenue" stroke="var(--color-revenue)" strokeWidth={2} dot={true} />
                </LineChart>
            </ChartContainer>
        </CardContent>
      </Card>

      <section>
        <h2 className="text-xl font-semibold mb-4 text-foreground/80">Conversion Funnel</h2>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="lg:col-span-1">
                 <CardHeader>
                    <CardTitle>Funnel Pengunjung ke Pesanan</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="flex items-center justify-center space-x-4">
                        <div className="text-center">
                            <Users className="h-8 w-8 mx-auto text-primary" />
                            <p className="text-2xl font-bold">1,250</p>
                            <p className="text-sm text-muted-foreground">Visitors</p>
                        </div>
                        <div className="text-center text-muted-foreground">
                            <TrendingUp className="h-6 w-6 mx-auto" />
                            <p className="text-lg font-bold text-foreground">3.6%</p>
                        </div>
                         <div className="text-center">
                            <ShoppingCart className="h-8 w-8 mx-auto text-green-500" />
                            <p className="text-2xl font-bold">45</p>
                            <p className="text-sm text-muted-foreground">Orders</p>
                        </div>
                    </div>
                </CardContent>
            </Card>

            <Card>
                <CardHeader>
                    <CardTitle>Top Converting Budget</CardTitle>
                    <CardDescription>Budget yang paling banyak menghasilkan pesanan.</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="space-y-4 text-sm">
                        <div className="flex justify-between items-center">
                            <span>UMKM</span>
                            <div className="flex items-center gap-2">
                                <span className="font-semibold">5.2%</span>
                                <div className="w-32 h-2 bg-muted rounded-full"><div className="h-2 bg-primary rounded-full" style={{width: '70%'}}></div></div>
                            </div>
                        </div>
                        <div className="flex justify-between items-center">
                            <span>E-Comm</span>
                            <div className="flex items-center gap-2">
                                <span className="font-semibold">3.1%</span>
                                <div className="w-32 h-2 bg-primary rounded-full" style={{width: '50%'}}></div>
                            </div>
                        </div>
                        <div className="flex justify-between items-center">
                            <span>Kaki Lima</span>
                            <div className="flex items-center gap-2">
                                <span className="font-semibold">2.5%</span>
                                <div className="w-32 h-2 bg-primary rounded-full" style={{width: '40%'}}></div>
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>

             <Card>
                <CardHeader>
                    <CardTitle>Best Performing Promo</CardTitle>
                    <CardDescription>Promo yang paling efektif menarik pelanggan.</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="flex flex-col items-center justify-center h-full">
                        <div className="p-3 bg-accent rounded-full mb-2">
                            <Percent className="h-8 w-8 text-accent-foreground" />
                        </div>
                        <p className="text-lg font-bold">NEWBIE20</p>
                        <p className="text-sm text-muted-foreground">8.1% Conversion Rate</p>
                    </div>
                </CardContent>
            </Card>
        </div>
      </section>
    </div>
  );
}
---
--- FILE: src/app/admin/automation/calendar/page.tsx ---
'use client';

import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { mockCalendarActivityLogs } from '@/lib/data';
import { CheckCircle, CalendarDays, CalendarClock, Save } from 'lucide-react';

export default function CalendarAutomationPage() {
  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Otomasi Google Calendar</h1>
        <p className="text-muted-foreground">Sinkronkan jadwal meeting dan deadline proyek secara otomatis.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div className="lg:col-span-2 space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Koneksi Akun</CardTitle>
              <CardDescription>Hubungkan akun Google Calendar Anda untuk memulai.</CardDescription>
            </CardHeader>
            <CardContent>
                <div className="flex items-center justify-between p-4 border rounded-md">
                    <div className="flex items-center gap-3">
                        <CalendarDays className="h-8 w-8 text-green-600" />
                        <div>
                            <p className="font-semibold">admin@designflow.com</p>
                            <Badge variant="outline" className="border-green-500/30 bg-green-500/20 text-green-700 mt-1">
                                <CheckCircle className="mr-1 h-3 w-3" /> Terhubung
                            </Badge>
                        </div>
                    </div>
                    <Button variant="destructive">Putuskan Hubungan</Button>
                </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Template Event</CardTitle>
              <CardDescription>Atur format judul dan deskripsi untuk event yang dibuat otomatis.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="meeting-title">Template Judul Meeting</Label>
                <Input id="meeting-title" defaultValue="Meeting: Urgent Studio - [CustomerName] ([OrderID])" />
              </div>
               <div>
                <Label htmlFor="deadline-title">Template Judul Deadline</Label>
                <Input id="deadline-title" defaultValue="Deadline: [ServiceName] untuk [OrderID]" />
                 <p className="text-xs text-muted-foreground mt-1">
                  Variabel: <code>[OrderID]</code>, <code>[CustomerName]</code>, <code>[ServiceName]</code>.
                </p>
              </div>
            </CardContent>
            <CardFooter>
                <Button><Save className="mr-2 h-4 w-4" /> Simpan Template</Button>
            </CardFooter>
          </Card>
        </div>

        <div className="lg:col-span-1">
          <Card className="sticky top-24">
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><CalendarClock /> Aturan Sinkronisasi</CardTitle>
              <CardDescription>Aktifkan aturan untuk membuat event otomatis.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4 text-sm">
                <div className="flex items-start justify-between">
                    <div>
                        <Label htmlFor="sync-meeting" className="font-semibold">Buat Event Meeting</Label>
                        <p className="text-muted-foreground">Saat meeting dijadwalkan via Telegram/tool.</p>
                    </div>
                    <Switch id="sync-meeting" defaultChecked={true} />
                </div>
                <div className="flex items-start justify-between">
                    <div>
                        <Label htmlFor="sync-deadline" className="font-semibold">Buat Event Deadline</Label>
                        <p className="text-muted-foreground">Saat pesanan mulai dikerjakan.</p>
                    </div>
                    <Switch id="sync-deadline" defaultChecked={true} />
                </div>
                 <div className="flex items-start justify-between">
                    <div>
                        <Label htmlFor="sync-revision" className="font-semibold">Jadwalkan Meeting Revisi</Label>
                        <p className="text-muted-foreground">Saat revisi > 2x, buat proposal meeting.</p>
                    </div>
                    <Switch id="sync-revision" defaultChecked={false} />
                </div>
            </CardContent>
          </Card>
        </div>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Log Aktivitas Kalender</CardTitle>
          <CardDescription>Riwayat event yang dibuat dan diperbarui oleh sistem.</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Order ID</TableHead>
                <TableHead>Aktivitas</TableHead>
                <TableHead>Timestamp</TableHead>
                <TableHead>Pemicu</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockCalendarActivityLogs.map((log) => (
                <TableRow key={log.id}>
                  <TableCell className="font-medium">{log.orderId}</TableCell>
                  <TableCell>{log.activity}</TableCell>
                  <TableCell>{log.timestamp}</TableCell>
                  <TableCell><Badge variant="secondary">{log.trigger}</Badge></TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

    </div>
  );
}
---
--- FILE: src/app/admin/automation/drive/page.tsx ---
'use client';

import React, { useState, useEffect } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { mockDriveActivityLogs } from '@/lib/data';
import { FolderSync, Save, TestTube2, Link as LinkIcon, FolderCog, KeyRound, FileJson, FolderInput, Lightbulb, UserPlus, Power, Flame } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { createOrderFolder } from '@/ai/flows/create-drive-folder';
import type { DriveActivityLog } from '@/lib/types';

export default function DriveAutomationPage() {
  const { toast } = useToast();
  const [isTesting, setIsTesting] = useState(false);
  const [testOrderId, setTestOrderId] = useState('DSN-TEST-001');
  const [testCustomerName, setTestCustomerName] = useState('Pelanggan Uji');
  const [folderTemplate, setFolderTemplate] = useState('[OrderID] - [CustomerName]');
  const [activityLogs, setActivityLogs] = useState<DriveActivityLog[]>(mockDriveActivityLogs);

  const handleTestDrive = async () => {
    if (!testOrderId || !testCustomerName) {
      toast({
        title: 'Data Tes Dibutuhkan',
        description: 'Mohon masukkan Order ID dan Nama Klien untuk pengujian.',
        variant: 'destructive',
      });
      return;
    }

    setIsTesting(true);
    try {
      const result = await createOrderFolder({
        orderId: testOrderId,
        customerName: testCustomerName,
        folderTemplate: folderTemplate,
      });

      if (result.success && result.folderId) {
        toast({
          title: 'Folder Tes Berhasil Dibuat!',
          description: `Folder "${result.folderName}" telah dibuat di Google Drive Anda.`,
          action: result.folderUrl ? (
            <Button asChild variant="secondary" size="sm">
                <a href={result.folderUrl} target="_blank" rel="noopener noreferrer">Buka Folder</a>
            </Button>
          ) : undefined,
        });
        
        const newLog: DriveActivityLog = {
          id: result.folderId,
          orderId: testOrderId,
          activity: `Folder Created: ${result.folderName}`,
          timestamp: new Date().toLocaleString('id-ID'),
          user: 'System (Live Test)',
        };
        setActivityLogs(prevLogs => [newLog, ...prevLogs]);

      } else {
        throw new Error(result.error || 'Gagal membuat folder. Pastikan semua variabel .env sudah benar.');
      }
    } catch (error: any) {
      toast({
        title: 'Gagal Membuat Folder',
        description: error.message,
        variant: 'destructive',
      });
    } finally {
      setIsTesting(false);
    }
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Otomasi Google Drive</h1>
        <p className="text-muted-foreground">Ikuti langkah-langkah di bawah ini untuk menghubungkan aplikasi ke Google Drive Anda.</p>
      </div>

      <Alert variant="destructive">
        <Flame className="h-4 w-4" />
        <AlertTitle>Penting: Persiapan untuk Go-Live (Deployment)</AlertTitle>
        <AlertDescription>
            <p>Pengaturan di file <code>.env</code> hanya untuk pengembangan lokal. Agar integrasi ini berfungsi saat aplikasi dipublikasikan, Anda **harus** menyimpan variabel ini di **Firebase Secret Manager**:</p>
            <ul className="list-disc list-inside my-2">
                <li><code>DRIVE_SERVICE_ACCOUNT_JSON</code></li>
                <li><code>DRIVE_PARENT_FOLDER_ID</code></li>
            </ul>
            <Button asChild variant="secondary" size="sm" className="mt-2">
              <a href="https://console.cloud.google.com/security/secret-manager" target="_blank" rel="noopener noreferrer">
                Buka Secret Manager
              </a>
            </Button>
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div className="lg:col-span-2 space-y-8">
          
          <div className="space-y-6">
            <Card className="border-primary">
                <CardHeader>
                    <CardTitle className="flex items-center gap-3"><Power className="h-6 w-6"/> Langkah 1: Aktifkan Google Drive API</CardTitle>
                    <CardDescription>Sebelum bot bisa bekerja, kita harus "menyalakan" fitur Google Drive di proyek Google Cloud Anda. Anggap ini seperti membuka gerbang utama.</CardDescription>
                </CardHeader>
                <CardContent>
                    <ol className="list-decimal list-inside space-y-2 text-sm">
                        <li>Buka halaman Google Drive API di Google Cloud Console menggunakan tombol di bawah.</li>
                        <li>Pastikan proyek yang terpilih di bagian atas adalah proyek yang benar (`urgent-studio`).</li>
                        <li>Jika API belum aktif, Anda akan melihat tombol biru besar bertuliskan <strong>"ENABLE"</strong>. Klik tombol tersebut.</li>
                        <li>Tunggu beberapa saat hingga proses selesai. Halaman akan memuat ulang dan menampilkan grafik penggunaan. Jika sudah aktif, Anda tidak perlu melakukan apa-apa.</li>
                    </ol>
                </CardContent>
                <CardFooter>
                    <Button asChild>
                        <a href="https://console.cloud.google.com/apis/library/drive.googleapis.com" target="_blank" rel="noopener noreferrer">Buka Halaman Google Drive API</a>
                    </Button>
                </CardFooter>
            </Card>
            
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3"><KeyRound className="h-6 w-6"/> Langkah 2: Buat Kunci API (Service Account)</CardTitle>
                    <CardDescription>Jika Anda sudah punya kunci dari proses sebelumnya, Anda bisa melewati ini. Jika belum, ikuti langkah ini untuk membuat "kunci" khusus untuk bot kita.</CardDescription>
                </CardHeader>
                <CardContent>
                    <ol className="list-decimal list-inside space-y-2 text-sm">
                        <li>Buka Google Cloud Console dan pastikan Anda memilih proyek yang benar (`urgent-studio`).</li>
                        <li>Di menu pencarian, ketik "Service Accounts" dan buka halamannya.</li>
                        <li>Klik "+ CREATE SERVICE ACCOUNT", beri nama (misal: "designflow-bot"), lalu klik "CREATE AND CONTINUE".</li>
                        <li>Pada bagian "Role", cari kategori <strong>Basic</strong>, lalu pilih <strong>Editor</strong>. Klik "CONTINUE" dan "DONE".</li>
                        <li>Temukan service account yang baru dibuat di daftar, klik ikon tiga titik di kolom "Actions", dan pilih "Manage keys".</li>
                        <li>Klik "ADD KEY" > "Create new key". Pilih "JSON" sebagai tipe, lalu klik "CREATE". Sebuah file JSON akan terunduh.</li>
                    </ol>
                </CardContent>
                <CardFooter>
                    <Button asChild>
                        <a href="https://console.cloud.google.com/iam-admin/serviceaccounts" target="_blank" rel="noopener noreferrer">Buka Halaman Service Accounts</a>
                    </Button>
                </CardFooter>
            </Card>

            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3"><FileJson className="h-6 w-6"/> Langkah 3: Simpan Kunci di File .env</CardTitle>
                    <CardDescription>Salin isi file JSON yang Anda unduh tadi ke dalam file <code>.env</code> di proyek ini.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="text-sm p-3 rounded-md bg-blue-500/10 border border-blue-500/20 text-blue-800 flex items-start gap-3">
                        <Lightbulb className="h-5 w-5 mt-0.5 flex-shrink-0" />
                        <div>
                            <strong>Petunjuk Lokasi File:</strong> File <code>.env</code> berada di direktori utama (root) proyek Anda, di panel file di sebelah kiri. Levelnya sejajar dengan file <code>package.json</code>.
                        </div>
                    </div>
                    <p className="text-sm">Buka file JSON yang baru saja diunduh dengan text editor. Salin **seluruh isinya**.</p>
                    <div>
                        <Label>Tempelkan di file <code>.env</code> dengan format seperti ini:</Label>
                        <code className="relative block rounded bg-muted px-4 py-2 mt-2 text-sm">
                           <span className="text-primary font-semibold">DRIVE_SERVICE_ACCOUNT_JSON</span>=
                           <span className="text-muted-foreground">'{'{'}"type": "service_account", ...{'}'}'</span>
                        </code>
                        <p className="text-xs text-muted-foreground mt-1">Pastikan seluruh konten JSON berada dalam satu baris dan diapit oleh tanda kutip tunggal jika perlu.</p>
                    </div>
                </CardContent>
            </Card>

             <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3"><FolderInput className="h-6 w-6"/> Langkah 4: Tentukan & Bagikan Folder Utama</CardTitle>
                    <CardDescription>Pilih folder di Drive Anda & izinkan bot kita untuk menulis di dalamnya.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                     <ol className="list-decimal list-inside space-y-3 text-sm">
                        <li>Buat sebuah folder baru di Google Drive Anda (misalnya: "Pesanan DesignFlow").</li>
                        <li>Klik kanan pada folder tersebut dan pilih <span className="font-semibold">Bagikan (Share)</span>.</li>
                        <li>
                            Buka kembali file JSON yang Anda unduh. Cari alamat email di bawah kunci <code className="bg-muted px-1 py-0.5 rounded">client_email</code>. Inilah "identitas" bot Anda.
                            <div className="text-xs p-2 mt-2 rounded-md bg-blue-500/10 border border-blue-500/20">
                                <p className="text-blue-800 dark:text-blue-200">Contoh di file JSON:</p>
                                <code className="block text-blue-900 dark:text-blue-300">
                                    ... <br/>
                                    "private_key": "...", <br/>
                                    <span className="bg-primary/20 p-0.5 rounded font-bold">"client_email": "nama-bot-anda@proyek-anda.iam.gserviceaccount.com",</span> <br/>
                                    "client_id": "...", <br/>
                                    ...
                                </code>
                            </div>
                        </li>
                        <li>
                            Di dialog "Bagikan", tempelkan alamat email tersebut, berikan peran sebagai <span className="font-semibold">Editor</span>, dan klik <span className="font-semibold">Kirim</span>.
                             <div className="text-xs p-2 mt-2 rounded-md bg-amber-500/10 border border-amber-500/20 text-amber-800 dark:bg-amber-300/10 dark:border-amber-300/20 dark:text-amber-200 flex items-start gap-2">
                                <UserPlus className="h-4 w-4 mt-0.5 flex-shrink-0" />
                                <div>
                                    <strong>Langkah Penting:</strong> Tanpa membagikan folder ini, bot tidak akan bisa membuat folder baru di dalamnya.
                                </div>
                            </div>
                        </li>
                        <li>Buka folder tersebut. ID-nya adalah bagian terakhir dari URL di browser Anda.</li>
                        <li>Salin ID tersebut dan tempelkan ke file <code>.env</code> Anda dengan nama variabel <code className="bg-muted px-1 py-0.5 rounded">DRIVE_PARENT_FOLDER_ID</code>.</li>
                     </ol>
                     <div className="space-y-2 pt-2">
                        <Label>Format di file <code>.env</code></Label>
                        <code className="relative block rounded bg-muted px-4 py-2 mt-2 text-sm">
                           <span className="text-primary font-semibold">DRIVE_PARENT_FOLDER_ID</span>=
                           <span className="text-muted-foreground">ID_FOLDER_ANDA_DI_SINI</span>
                        </code>
                        <p className="text-xs text-muted-foreground mt-1">
                          Contoh URL: drive.google.com/drive/folders/<b>ID_FOLDER_ANDA</b>
                        </p>
                    </div>
                </CardContent>
            </Card>
          </div>
          
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><FolderCog/>Struktur Folder (Opsional)</CardTitle>
              <CardDescription>Atur format penamaan folder proyek. Anda bisa menggunakan variabel yang tersedia.</CardDescription>
            </CardHeader>
            <CardContent>
                <div className="space-y-2">
                    <Label htmlFor="folder-structure">Template Nama Folder</Label>
                    <Input 
                    id="folder-structure" 
                    value={folderTemplate}
                    onChange={(e) => setFolderTemplate(e.target.value)}
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                    Variabel yang tersedia: <code>[OrderID]</code>, <code>[CustomerName]</code>.
                    </p>
                </div>
            </CardContent>
            <CardFooter>
                <Button variant="outline" disabled><Save className="mr-2 h-4 w-4" /> Simpan Pengaturan (Simulasi)</Button>
            </CardFooter>
          </Card>

        </div>

        <div className="lg:col-span-1 space-y-8">
          <Card className="sticky top-24">
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><TestTube2 /> Uji Integrasi</CardTitle>
                <CardDescription>Setelah menyelesaikan semua langkah, uji koneksi Anda dengan membuat folder tes.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <div className="space-y-2">
                    <Label htmlFor="test-order-id">Test Order ID</Label>
                    <Input 
                        id="test-order-id" 
                        value={testOrderId}
                        onChange={(e) => setTestOrderId(e.target.value)}
                    />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="test-customer-name">Test Nama Klien</Label>
                    <Input 
                        id="test-customer-name" 
                        value={testCustomerName}
                        onChange={(e) => setTestCustomerName(e.target.value)}
                    />
                </div>
            </CardContent>
            <CardFooter>
                <Button className="w-full" onClick={handleTestDrive} disabled={isTesting}>
                    {isTesting ? <><FolderSync className="mr-2 h-4 w-4 animate-spin" /> Membuat...</> : <><FolderSync className="mr-2 h-4 w-4" /> Uji Buat Folder</>}
                </Button>
            </CardFooter>
          </Card>
        </div>
      </div>
      
       <Card>
        <CardHeader>
          <CardTitle>Log Aktivitas</CardTitle>
          <CardDescription>Riwayat aktivitas sinkronisasi folder yang berhasil.</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Order ID</TableHead>
                <TableHead>Aktivitas</TableHead>
                <TableHead>Timestamp</TableHead>
                <TableHead>Tipe</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {activityLogs.map((log) => (
                <TableRow key={log.id}>
                  <TableCell className="font-medium">{log.orderId}</TableCell>
                  <TableCell className="flex items-center gap-2">
                    {log.activity}
                    {log.user === 'System (Live Test)' && (
                         <Button asChild variant="ghost" size="icon" className="h-6 w-6">
                            <a href={`https://drive.google.com/drive/folders/${log.id}`} target="_blank" rel="noopener noreferrer"><LinkIcon className="h-3 w-3" /></a>
                         </Button>
                    )}
                  </TableCell>
                  <TableCell>{log.timestamp}</TableCell>
                  <TableCell><Badge variant={log.user === 'System (Live Test)' ? 'default' : 'secondary'} className={log.user === 'System (Live Test)' ? 'bg-green-600' : ''}>{log.user}</Badge></TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
---
--- FILE: src/app/admin/automation/meet/page.tsx ---
'use client';

import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { mockMeetActivityLogs } from '@/lib/data';
import { CheckCircle, Video, Save, Clock } from 'lucide-react';


export default function MeetAutomationPage() {
  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Otomasi Google Meet</h1>
        <p className="text-muted-foreground">Jadwalkan meeting konsultasi atau kickoff proyek secara otomatis.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div className="lg:col-span-2 space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Koneksi Akun Google</CardTitle>
              <CardDescription>Hubungkan akun Google Anda untuk integrasi dengan Meet.</CardDescription>
            </CardHeader>
            <CardContent>
                <div className="flex items-center justify-between p-4 border rounded-md">
                    <div className="flex items-center gap-3">
                        <Video className="h-8 w-8 text-green-600" />
                        <div>
                            <p className="font-semibold">admin@designflow.com</p>
                            <Badge variant="outline" className="border-green-500/30 bg-green-500/20 text-green-700 mt-1">
                                <CheckCircle className="mr-1 h-3 w-3" /> Terhubung
                            </Badge>
                        </div>
                    </div>
                    <Button variant="destructive">Putuskan Hubungan</Button>
                </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Template Event Meeting</CardTitle>
              <CardDescription>Atur format judul untuk meeting yang dibuat otomatis.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="kickoff-title">Template Judul Kickoff Meeting</Label>
                <Input id="kickoff-title" defaultValue="Kickoff: Urgent Studio - [CustomerName] ([OrderID])" />
              </div>
               <div>
                <Label htmlFor="consultation-title">Template Judul Meeting Konsultasi</Label>
                <Input id="consultation-title" defaultValue="Konsultasi: Revisi [ServiceName] untuk [OrderID]" />
                 <p className="text-xs text-muted-foreground mt-1">
                  Variabel: <code>[OrderID]</code>, <code>[CustomerName]</code>, <code>[ServiceName]</code>.
                </p>
              </div>
            </CardContent>
            <CardFooter>
                <Button><Save className="mr-2 h-4 w-4" /> Simpan Template</Button>
            </CardFooter>
          </Card>
        </div>

        <div className="lg:col-span-1">
          <Card className="sticky top-24">
            <CardHeader>
              <CardTitle className="flex items-center gap-2"><Clock /> Aturan Penjadwalan</CardTitle>
              <CardDescription>Aktifkan aturan untuk menjadwalkan meeting.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4 text-sm">
                <div className="flex items-start justify-between">
                    <div>
                        <Label htmlFor="sync-kickoff" className="font-semibold">Jadwalkan Kickoff Meeting</Label>
                        <p className="text-muted-foreground">Saat pesanan baru dikonfirmasi.</p>
                    </div>
                    <Switch id="sync-kickoff" defaultChecked={true} />
                </div>
                <div className="flex items-start justify-between">
                    <div>
                        <Label htmlFor="sync-consultation" className="font-semibold">Jadwalkan Konsultasi Revisi</Label>
                        <p className="text-muted-foreground">Otomatis saat revisi melebihi batas (misal: > 2x).</p>
                    </div>
                    <Switch id="sync-consultation" defaultChecked={false} />
                </div>
            </CardContent>
          </Card>
        </div>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Log Penjadwalan Meet</CardTitle>
          <CardDescription>Riwayat meeting yang dibuat oleh sistem.</CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Order ID</TableHead>
                <TableHead>Aktivitas</TableHead>
                <TableHead>Timestamp</TableHead>
                <TableHead>Pemicu</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockMeetActivityLogs.map((log) => (
                <TableRow key={log.id}>
                  <TableCell className="font-medium">{log.orderId}</TableCell>
                  <TableCell>{log.activity}</TableCell>
                  <TableCell>{log.timestamp}</TableCell>
                  <TableCell><Badge variant="secondary">{log.trigger}</Badge></TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

    </div>
  );
}
---
--- FILE: src/app/admin/automation/telegram/page.tsx ---
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { verifyTelegramBot } from '@/ai/flows/verify-telegram-bot';
import { sendTelegramUpdate } from '@/ai/flows/telegram-bot-integration';
import { Bot, CheckCircle, XCircle, Loader2, Send, Copy, AlertTriangle } from 'lucide-react';
import type { VerifyTelegramBotOutput } from '@/ai/flows/verify-telegram-bot';

type VerificationStatus = 'idle' | 'loading' | 'success' | 'error';
type SendStatus = 'idle' | 'loading' | 'success' | 'error';

export default function TelegramAutomationPage() {
  const { toast } = useToast();
  const [botToken, setBotToken] = useState('');
  const [verificationStatus, setVerificationStatus] = useState<VerificationStatus>('idle');
  const [botInfo, setBotInfo] = useState<VerifyTelegramBotOutput | null>(null);
  
  const [testChatId, setTestChatId] = useState('');
  const [sendStatus, setSendStatus] = useState<SendStatus>('idle');
  
  const handleVerifyToken = async () => {
    if (!botToken) {
      toast({
        title: 'Token Dibutuhkan',
        description: 'Mohon masukkan Token Bot Anda untuk verifikasi.',
        variant: 'destructive',
      });
      return;
    }
    setVerificationStatus('loading');
    setBotInfo(null);
    try {
      const result = await verifyTelegramBot({ botToken });
      setBotInfo(result);
      if (result.success) {
        setVerificationStatus('success');
        toast({
          title: 'Verifikasi Berhasil!',
          description: `Bot dengan username @${result.botName} berhasil terhubung.`,
        });
      } else {
        setVerificationStatus('error');
        toast({
          title: 'Verifikasi Gagal',
          description: result.error || 'Token tidak valid atau terjadi kesalahan.',
          variant: 'destructive',
        });
      }
    } catch (error: any) {
      setVerificationStatus('error');
      setBotInfo({ success: false, error: error.message || 'Terjadi kesalahan jaringan.' });
      toast({
        title: 'Error',
        description: error.message || 'Gagal menghubungi server.',
        variant: 'destructive',
      });
    }
  };

  const handleSendTestMessage = async () => {
    if (!testChatId) {
      toast({
        title: 'Chat ID Dibutuhkan',
        description: 'Mohon masukkan Chat ID tujuan untuk mengirim pesan tes.',
        variant: 'destructive',
      });
      return;
    }
    setSendStatus('loading');
    try {
      const result = await sendTelegramUpdate({
        botToken,
        telegramId: testChatId,
        message: `✅ Pesan tes dari Urgent Studio! Jika Anda menerima ini, bot Anda telah terkonfigurasi dengan benar.`,
      });

      if (result.success) {
        setSendStatus('success');
        toast({
          title: 'Pesan Terkirim!',
          description: `Pesan tes berhasil dikirim ke Chat ID ${testChatId}.`,
        });
      } else {
        setSendStatus('error');
         toast({
            title: 'Gagal Mengirim Pesan',
            description: result.error || 'Terjadi kesalahan. Pastikan Chat ID benar.',
            variant: 'destructive',
        });
      }
    } catch (error: any) {
      setSendStatus('error');
      toast({
        title: 'Error',
        description: error.message || 'Gagal menghubungi server.',
        variant: 'destructive',
      });
    }
  };
  
  const copyWebhookUrl = () => {
    // In a real deployed app, this would be the actual URL.
    const webhookUrl = `${window.location.origin}/api/telegram/webhook`;
    navigator.clipboard.writeText(`https://api.telegram.org/bot${botToken}/setWebhook?url=${webhookUrl}`);
    toast({
      title: 'URL Webhook Disalin!',
      description: 'Tempelkan di browser Anda untuk mengatur webhook.',
    });
  };

  const StatusIndicator = ({ status, botInfo }: { status: VerificationStatus, botInfo: VerifyTelegramBotOutput | null }) => {
    if (status === 'loading') {
      return <Badge variant="outline" className="text-blue-600 border-blue-600/30"><Loader2 className="mr-1 h-3 w-3 animate-spin" /> Memverifikasi...</Badge>;
    }
    if (status === 'success' && botInfo?.success) {
      return <Badge variant="outline" className="text-green-700 bg-green-500/20 border-green-500/30"><CheckCircle className="mr-1 h-3 w-3" /> Terhubung sebagai @{botInfo.botName}</Badge>;
    }
    if (status === 'error') {
      return <Badge variant="destructive"><XCircle className="mr-1 h-3 w-3" /> Gagal: {botInfo?.error?.substring(0, 30)}...</Badge>;
    }
    return <Badge variant="secondary">Menunggu verifikasi</Badge>;
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Otomasi Telegram</h1>
        <p className="text-muted-foreground">Kelola notifikasi otomatis dan pengaturan bot Telegram Anda.</p>
      </div>

      <Alert>
        <AlertTriangle className="h-4 w-4" />
        <AlertTitle>Catatan Penting</AlertTitle>
        <AlertDescription>
          Untuk fungsionalitas penuh (seperti notifikasi otomatis dari pesanan), Anda tetap harus menyimpan <strong>Token Bot</strong> di file <code>.env</code> dengan nama variabel <code>TELEGRAM_BOT_TOKEN</code>. Halaman ini hanya untuk verifikasi dan pengujian.
        </AlertDescription>
      </Alert>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><Bot /> Pengaturan Bot</CardTitle>
            <CardDescription>Masukkan token bot Anda untuk verifikasi dan pengujian.</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="bot-token">Token Bot</Label>
              <Input 
                id="bot-token"
                type="password"
                placeholder="123456:ABC-DEF..."
                value={botToken}
                onChange={(e) => setBotToken(e.target.value)}
              />
            </div>
            <div>
              <Label>Status Koneksi</Label>
              <div className="mt-2">
                <StatusIndicator status={verificationStatus} botInfo={botInfo} />
              </div>
            </div>
          </CardContent>
          <CardFooter className="flex-col items-stretch gap-3">
             <Button className="w-full" onClick={handleVerifyToken} disabled={verificationStatus === 'loading'}>
              {verificationStatus === 'loading' ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Memverifikasi...</> : 'Verifikasi Token'}
            </Button>
            <Button className="w-full" variant="secondary" onClick={copyWebhookUrl} disabled={verificationStatus !== 'success'}>
                <Copy className="mr-2 h-4 w-4" /> Salin URL Webhook
            </Button>
            <p className="text-xs text-muted-foreground text-center">Setelah token terverifikasi, salin URL webhook dan buka di browser untuk mengaktifkan bot.</p>
          </CardFooter>
        </Card>

        <Card className={verificationStatus !== 'success' ? 'bg-muted/50 pointer-events-none opacity-60' : ''}>
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><Send /> Uji Coba Kirim Pesan</CardTitle>
            <CardDescription>
              {verificationStatus !== 'success' 
                ? 'Verifikasi token terlebih dahulu untuk mengaktifkan fitur ini.'
                : 'Kirim pesan tes ke Chat ID Anda untuk memastikan bot berjalan.'
              }
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="chat-id">Chat ID Anda</Label>
              <Input 
                id="chat-id"
                placeholder="Dapatkan setelah mengirim /start ke bot Anda"
                value={testChatId}
                onChange={(e) => setTestChatId(e.target.value)}
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button className="w-full" onClick={handleSendTestMessage} disabled={sendStatus === 'loading' || verificationStatus !== 'success'}>
              {sendStatus === 'loading' ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Mengirim...</> : 'Kirim Pesan Tes'}
            </Button>
          </CardFooter>
        </Card>
      </div>

    </div>
  );
}
---
--- FILE: src/app/admin/customers/page.tsx ---
'use client';

import React from 'react';
import Link from 'next/link';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { mockCustomers } from '@/lib/data';
import { formatRupiah } from '@/lib/utils';
import type { CustomerProfile } from '@/lib/types';

export default function AdminCustomersPage() {
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Manajemen Pelanggan</h1>
        <p className="text-muted-foreground">Lihat dan kelola semua data pelanggan Anda.</p>
      </div>
      
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Pelanggan</TableHead>
                <TableHead>Lifetime Value (LTV)</TableHead>
                <TableHead>Total Pesanan</TableHead>
                <TableHead>Order Terakhir</TableHead>
                <TableHead className="text-right">Aksi</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockCustomers.length > 0 ? (
                mockCustomers.map((customer: CustomerProfile) => (
                  <TableRow key={customer.id}>
                    <TableCell className="font-medium">
                        <div className="flex items-center gap-3">
                            <Avatar>
                                <AvatarImage src={customer.avatar} alt={customer.name} data-ai-hint="user avatar" />
                                <AvatarFallback>{customer.name.charAt(0)}</AvatarFallback>
                            </Avatar>
                            <div>
                                <p>{customer.name}</p>
                                <p className="text-sm text-muted-foreground">{customer.email}</p>
                            </div>
                        </div>
                    </TableCell>
                    <TableCell>{formatRupiah(customer.ltv)}</TableCell>
                    <TableCell>{customer.totalOrders}</TableCell>
                    <TableCell>{customer.lastOrderDate}</TableCell>
                    <TableCell className="text-right">
                       <Button asChild size="sm" variant="outline">
                          <Link href={`/admin/customers/${customer.id}`}>Lihat Detail</Link>
                       </Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={5} className="text-center h-24">
                    Belum ada data pelanggan.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/admin/layout.tsx ---
import {
  SidebarProvider,
  Sidebar,
  SidebarContent,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarGroup,
  SidebarGroupLabel,
  SidebarSeparator,
} from '@/components/ui/sidebar';
import { 
  LayoutDashboard, 
  Package,
  CreditCard,
  Archive,
  Gift,
  Ticket,
  Image as ImageIcon,
  Users,
  Mail,
  Settings,
  BarChart3,
  Wrench,
  LineChart,
  UserCog,
  Bot,
  Send,
  Folder,
  Calendar,
  Video,
  CircleDollarSign,
  Palette
} from 'lucide-react';
import Link from 'next/link';
import { AdminHeader } from '@/components/AdminHeader';

export default function AdminLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <SidebarProvider>
      <div className="flex min-h-screen bg-muted/40">
        <Sidebar>
            <SidebarContent>
              <SidebarGroup>
                  <SidebarMenu>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin">
                          <LayoutDashboard />
                          Dashboard
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/orders">
                          <Package />
                          Pesanan
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/customers">
                          <Users />
                          Pelanggan
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/payments">
                          <CreditCard />
                          Pembayaran
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                        <SidebarMenuButton asChild>
                            <Link href="/admin/refunds">
                                <CircleDollarSign />
                                Refund
                            </Link>
                        </SidebarMenuButton>
                    </SidebarMenuItem>
                     <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/products">
                          <Archive />
                          Produk
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/analytics">
                          <LineChart />
                          Analytics
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                  </SidebarMenu>
              </SidebarGroup>

              <SidebarSeparator />

              <SidebarGroup>
                <SidebarGroupLabel>MARKETING</SidebarGroupLabel>
                  <SidebarMenu>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/marketing/promos">
                          <Gift />
                          Promo
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/marketing/coupons">
                          <Ticket />
                          Kupon
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/marketing/banners">
                          <ImageIcon />
                          Banner
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/marketing/loyalty">
                          <Users />
                          Loyalty
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/marketing/email">
                          <Mail />
                          Email
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                  </SidebarMenu>
              </SidebarGroup>
              
              <SidebarSeparator />

              <SidebarGroup>
                <SidebarGroupLabel className="flex items-center gap-2">
                  <Settings />
                  SETTINGS
                </SidebarGroupLabel>
                  <SidebarMenu>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/settings/budgets">
                          <Palette />
                          Tampilan Budget
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/settings/capacity">
                          <BarChart3 />
                          Kapasitas
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/settings/integrations">
                          <Wrench />
                          Integrasi
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/settings/user-mgmt">
                          <UserCog />
                          User Mgmt
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                  </SidebarMenu>
              </SidebarGroup>
              
              <SidebarSeparator />

              <SidebarGroup>
                <SidebarGroupLabel className="flex items-center gap-2">
                  <Bot />
                  AUTOMATION
                </SidebarGroupLabel>
                  <SidebarMenu>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/automation/telegram">
                          <Send />
                          Telegram
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/automation/drive">
                          <Folder />
                          Drive
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/automation/calendar">
                          <Calendar />
                          Calendar
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                    <SidebarMenuItem>
                      <SidebarMenuButton asChild>
                        <Link href="/admin/automation/meet">
                          <Video />
                          Meet
                        </Link>
                      </SidebarMenuButton>
                    </SidebarMenuItem>
                  </SidebarMenu>
              </SidebarGroup>

            </SidebarContent>
        </Sidebar>
        <div className="flex flex-1 flex-col">
            <AdminHeader />
            <main className="flex-1 p-4 sm:p-6 lg:p-8 overflow-auto">
                {children}
            </main>
        </div>
      </div>
    </SidebarProvider>
  );
}
---
--- FILE: src/app/admin/marketing/banners/page.tsx ---
'use client';

import React from 'react';
import Image from 'next/image';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { mockBanners } from '@/lib/data';
import { cn } from '@/lib/utils';
import { PlusCircle } from 'lucide-react';
import type { Banner } from '@/lib/types';

export default function AdminBannersPage() {
  
  const getStatusClass = (status: string) => {
    switch (status) {
      case 'Aktif': return 'bg-green-500/20 text-green-700 border-green-500/30';
      case 'Draft': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/30';
      case 'Selesai': return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
    }
  };

  const activeBanner = mockBanners.find(b => b.status === 'Aktif');

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Kelola Banner Promo</h1>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Upload Banner
        </Button>
      </div>
      
      {activeBanner && (
        <Card>
            <CardHeader>
                <CardTitle>Preview Banner Aktif</CardTitle>
                <CardDescription>Banner ini yang sedang ditampilkan kepada pengunjung.</CardDescription>
            </CardHeader>
            <CardContent>
                {activeBanner.type === 'Image' && activeBanner.image ? (
                     <Image
                        src={activeBanner.image}
                        alt={activeBanner.name}
                        width={800}
                        height={100}
                        className="object-cover w-full rounded-md border"
                        data-ai-hint="promotional banner"
                      />
                ) : (
                    <div className="p-6 bg-muted rounded-md text-center font-medium text-muted-foreground">
                        {activeBanner.content}
                    </div>
                )}
            </CardContent>
        </Card>
      )}

      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Nama</TableHead>
                <TableHead>Posisi</TableHead>
                <TableHead>Periode</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Aksi</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockBanners.length > 0 ? (
                mockBanners.map((banner: Banner) => (
                  <TableRow key={banner.id}>
                    <TableCell className="font-medium">{banner.name}</TableCell>
                    <TableCell>{banner.position}</TableCell>
                    <TableCell>{banner.period}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className={cn("capitalize", getStatusClass(banner.status))}>
                        {banner.status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right space-x-2">
                       <Button size="sm" variant="outline">Edit</Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={5} className="text-center h-24">
                    Belum ada banner yang dibuat.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/admin/marketing/coupons/page.tsx ---
'use client';

import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { mockCoupons } from '@/lib/data';
import { cn } from '@/lib/utils';
import { PlusCircle } from 'lucide-react';

export default function AdminCouponsPage() {
  
  const getStatusClass = (status: string) => {
    switch (status) {
      case 'Aktif': return 'bg-green-500/20 text-green-700 border-green-500/30';
      case 'Draft': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/30';
      case 'Expired': return 'bg-red-500/20 text-red-700 border-red-500/30';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Kelola Kupon Diskon</h1>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Buat Kupon
        </Button>
      </div>
      
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Kode</TableHead>
                <TableHead>Diskon</TableHead>
                <TableHead>Usage</TableHead>
                <TableHead>Periode</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Aksi</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockCoupons.length > 0 ? (
                mockCoupons.map(coupon => (
                  <TableRow key={coupon.id}>
                    <TableCell className="font-medium">{coupon.code}</TableCell>
                    <TableCell>{coupon.discount}</TableCell>
                    <TableCell>{coupon.usage}</TableCell>
                    <TableCell>{coupon.period}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className={cn("capitalize", getStatusClass(coupon.status))}>
                        {coupon.status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right space-x-2">
                       <Button size="sm" variant="outline">Edit</Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={6} className="text-center h-24">
                    Belum ada kupon yang dibuat.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/admin/marketing/email/page.tsx ---
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { PlusCircle, Users, ShoppingCart, Cake, Star } from 'lucide-react';

const emailCampaigns = [
  {
    id: 'welcome',
    title: 'Welcome Series',
    description: 'Kirim email selamat datang saat pelanggan baru mendaftar.',
    icon: Users,
    isActive: true,
  },
  {
    id: 'abandoned-cart',
    title: 'Abandoned Cart Reminder',
    description: 'Ingatkan pelanggan yang meninggalkan keranjang belanja.',
    icon: ShoppingCart,
    isActive: true,
  },
  {
    id: 'post-purchase',
    title: 'Post-Purchase Follow-up',
    description: 'Kirim email ucapan terima kasih dan minta feedback setelah pesanan selesai.',
    icon: Star,
    isActive: false,
  },
  {
    id: 'birthday-discount',
    title: 'Birthday Discount',
    description: 'Kirim kupon diskon spesial di hari ulang tahun pelanggan.',
    icon: Cake,
    isActive: false,
  },
];


export default function AdminEmailMarketingPage() {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Email Campaign Automation</h1>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Buat Campaign Baru
        </Button>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Statistik Email</CardTitle>
          <CardDescription>Ringkasan performa email marketing Anda bulan ini.</CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-2 md:grid-cols-4 gap-6">
            <div className="flex flex-col gap-1">
                <span className="text-sm text-muted-foreground">Email Terkirim</span>
                <span className="text-2xl font-bold">1,254</span>
            </div>
             <div className="flex flex-col gap-1">
                <span className="text-sm text-muted-foreground">Open Rate</span>
                <span className="text-2xl font-bold">28.3%</span>
            </div>
             <div className="flex flex-col gap-1">
                <span className="text-sm text-muted-foreground">Click Rate</span>
                <span className="text-2xl font-bold">4.1%</span>
            </div>
             <div className="flex flex-col gap-1">
                <span className="text-sm text-muted-foreground">Unsubscribed</span>
                <span className="text-2xl font-bold">12</span>
            </div>
        </CardContent>
      </Card>

      <section>
        <h2 className="text-xl font-semibold mb-4 text-foreground/80">Automation Triggers</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {emailCampaigns.map((campaign) => (
            <Card key={campaign.id}>
              <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <campaign.icon className="h-8 w-8 text-primary" />
                      <CardTitle>{campaign.title}</CardTitle>
                    </div>
                    <Switch
                        id={`switch-${campaign.id}`}
                        defaultChecked={campaign.isActive}
                        aria-label={`Activate ${campaign.title}`}
                    />
                  </div>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">{campaign.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>
    </div>
  );
}
---
--- FILE: src/app/admin/marketing/loyalty/page.tsx ---
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Award, Gem, Crown, Star, Ticket, UserPlus } from 'lucide-react';

export default function AdminLoyaltyPage() {
  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Program Loyalitas Pelanggan</h1>
        <Button variant="outline">Kelola Pengaturan</Button>
      </div>

      <section>
        <h2 className="text-xl font-semibold mb-4 text-foreground/80">Sistem Tier</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card>
            <CardHeader>
              <div className="flex items-center gap-3">
                <Award className="h-10 w-10 text-yellow-600" />
                <div>
                  <CardTitle>Bronze</CardTitle>
                  <CardDescription>1-3 Pesanan</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
                <li>Cashback 5% untuk pesanan berikutnya.</li>
                <li>Dukungan pelanggan standar.</li>
              </ul>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <div className="flex items-center gap-3">
                <Gem className="h-10 w-10 text-slate-500" />
                 <div>
                    <CardTitle>Silver</CardTitle>
                    <CardDescription>4-7 Pesanan</CardDescription>
                 </div>
              </div>
            </CardHeader>
            <CardContent>
              <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
                <li>Cashback 10% untuk pesanan berikutnya.</li>
                <li>Antrian prioritas untuk pengerjaan.</li>
                <li>Akses ke promo eksklusif.</li>
              </ul>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
               <div className="flex items-center gap-3">
                  <Crown className="h-10 w-10 text-amber-500" />
                  <div>
                    <CardTitle>Gold</CardTitle>
                    <CardDescription>8+ Pesanan</CardDescription>
                  </div>
              </div>
            </CardHeader>
            <CardContent>
              <ul className="list-disc list-inside space-y-1 text-sm text-muted-foreground">
                <li>Cashback 15% untuk pesanan berikutnya.</li>
                <li>Antrian prioritas & pengerjaan ekspres.</li>
                <li>1x konsultasi desain gratis per bulan.</li>
              </ul>
            </CardContent>
          </Card>
        </div>
      </section>

      <section>
        <h2 className="text-xl font-semibold mb-4 text-foreground/80">Sistem Poin</h2>
         <Card>
            <CardContent className="pt-6 grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="flex items-start gap-4">
                  <div className="p-3 bg-primary/10 rounded-full">
                      <Star className="h-6 w-6 text-primary" />
                  </div>
                  <div>
                      <h3 className="font-semibold">Dapatkan Poin</h3>
                      <p className="text-sm text-muted-foreground">Setiap pesanan yang selesai akan mendapatkan 100 poin.</p>
                  </div>
              </div>
              <div className="flex items-start gap-4">
                   <div className="p-3 bg-primary/10 rounded-full">
                        <Ticket className="h-6 w-6 text-primary" />
                   </div>
                   <div>
                        <h3 className="font-semibold">Tukarkan Poin</h3>
                        <p className="text-sm text-muted-foreground">1000 poin dapat ditukar dengan kupon diskon Rp 50.000.</p>
                   </div>
              </div>
              <div className="flex items-start gap-4">
                   <div className="p-3 bg-primary/10 rounded-full">
                        <UserPlus className="h-6 w-6 text-primary" />
                   </div>
                   <div>
                        <h3 className="font-semibold">Bonus Referral</h3>
                        <p className="text-sm text-muted-foreground">Dapatkan bonus 200 poin untuk setiap teman yang berhasil Anda ajak.</p>
                   </div>
              </div>
            </CardContent>
         </Card>
      </section>
      
    </div>
  );
}
---
--- FILE: src/app/admin/marketing/promos/page.tsx ---
'use client';

import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { mockPromos } from '@/lib/data';
import { cn } from '@/lib/utils';
import { PlusCircle } from 'lucide-react';

export default function AdminPromosPage() {
  
  const getStatusClass = (status: string) => {
    switch (status) {
      case 'Aktif': return 'bg-green-500/20 text-green-700 border-green-500/30';
      case 'Draft': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/30';
      case 'Selesai': return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Kelola Promo Produk</h1>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Tambah Promo
        </Button>
      </div>
      
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Produk</TableHead>
                <TableHead>Promo</TableHead>
                <TableHead>Periode</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Aksi</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockPromos.length > 0 ? (
                mockPromos.map(promo => (
                  <TableRow key={promo.id}>
                    <TableCell className="font-medium">{promo.productName}</TableCell>
                    <TableCell>{promo.promoText}</TableCell>
                    <TableCell>{promo.period}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className={cn("capitalize", getStatusClass(promo.status))}>
                        {promo.status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right space-x-2">
                       <Button size="sm" variant="outline">Edit</Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={5} className="text-center h-24">
                    Belum ada promo yang dibuat.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/admin/orders/[orderId]/page.tsx ---
'use client';

import { useMemo, useState, useEffect } from 'react';
import { useParams, notFound } from 'next/navigation';
import { mockOrders, allOrderStatusesCategorized } from '@/lib/data';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { formatRupiah, cn } from '@/lib/utils';
import type { Order, OrderStatus } from '@/lib/types';
import { MessageSquare, Send, Folder, Calendar, Video, History, FolderSync, Loader2 } from 'lucide-react';
import { createOrderFolder } from '@/ai/flows/create-drive-folder';
import { sendTelegramUpdate } from '@/ai/flows/telegram-bot-integration';
import { useToast } from '@/hooks/use-toast';

export default function OrderDetailPage() {
  const params = useParams();
  const orderId = params?.orderId as string;
  const { toast } = useToast();
  
  const order: Order | null = useMemo(() => {
    if (!orderId) return null;
    return mockOrders.find(o => o.kode_order === orderId) || null;
  }, [orderId]);

  const [currentStatus, setCurrentStatus] = useState<OrderStatus>('Masuk Antrian');
  const [driveUrl, setDriveUrl] = useState(order?.driveFolderUrl);
  const [isCreatingFolder, setIsCreatingFolder] = useState(false);
  const [isSubmittingUpdate, setIsSubmittingUpdate] = useState(false);

  useEffect(() => {
    if (order) {
      setCurrentStatus(order.status_pesanan);
      setDriveUrl(order.driveFolderUrl);
    }
  }, [order]);

  if (params?.orderId && !order) {
    notFound();
  }

  if (!order) {
    return <div>Loading...</div>;
  }
  
  const handleCreateFolder = async () => {
    setIsCreatingFolder(true);
    try {
      const result = await createOrderFolder({
        orderId: order.kode_order,
        customerName: order.nama_klien,
      });

      if (result.success && result.folderUrl) {
        setDriveUrl(result.folderUrl);
        toast({
          title: 'Folder Berhasil Dibuat!',
          description: `Folder untuk pesanan ${order.kode_order} telah dibuat.`,
        });
        // Note: In a real app, you'd want to persist this URL to your database
        // and update the local mockOrder data or refetch.
      } else {
        throw new Error(result.error || 'Gagal membuat folder.');
      }
    } catch (error: any) {
      toast({
        title: 'Gagal Membuat Folder',
        description: error.message,
        variant: 'destructive',
      });
    } finally {
      setIsCreatingFolder(false);
    }
  };

  const handleStatusUpdate = async () => {
    if (!order) return;

    setIsSubmittingUpdate(true);
    try {
        const message = `🔔 *Update Pesanan Anda* 🔔\n\nHalo ${order.nama_klien},\nStatus pesanan Anda dengan ID \`${order.kode_order}\` telah diperbarui menjadi:\n\n*${currentStatus}*\n\nJika ada pertanyaan, jangan ragu untuk membalas pesan ini. Terima kasih!`;
        
        const result = await sendTelegramUpdate({
            telegramId: order.customerTelegram,
            message: message,
        });

        if (result.success) {
            toast({
                title: 'Update Terkirim!',
                description: `Notifikasi perubahan status ke "${currentStatus}" telah dikirim ke klien.`,
            });
            // In a real app, you would also update the order in your database.
        } else {
            throw new Error(result.error || 'Gagal mengirim notifikasi Telegram.');
        }

    } catch (error: any) {
        toast({
            title: 'Gagal Mengirim Update',
            description: error.message,
            variant: 'destructive',
        });
    } finally {
        setIsSubmittingUpdate(false);
    }
};

  const getStatusClass = (status: OrderStatus) => {
    switch (status) {
      // Positive flow
      case 'Masuk Antrian': return 'bg-gray-500 hover:bg-gray-500/90 text-gray-50';
      case 'Sedang Dikerjakan': return 'bg-blue-500 hover:bg-blue-500/90 text-blue-50';
      case 'Siap Kirim Pratinjau': return 'bg-cyan-500 hover:bg-cyan-500/90 text-cyan-50';
      case 'Sedang Direvisi': return 'bg-indigo-500 hover:bg-indigo-500/90 text-indigo-50';
      case 'Selesai': return 'bg-green-500 hover:bg-green-500/90 text-green-50';

      // Waiting statuses
      case 'Menunggu Pembayaran': return 'bg-yellow-500 hover:bg-yellow-500/90 text-yellow-50';
      case 'Menunggu Respon Klien': return 'bg-amber-500 hover:bg-amber-500/90 text-amber-50';
      
      // Action needed statuses
      case 'Perlu Tinjauan Owner': return 'bg-purple-600 hover:bg-purple-600/90 text-purple-50 font-bold';
      case 'Eskalasi: Revisi di Luar Lingkup': return 'bg-orange-500 hover:bg-orange-500/90 text-orange-50 font-bold';

      // Negative/Cancellation statuses
      case 'Dibatalkan (Belum Dikerjakan)': return 'bg-red-500 hover:bg-red-500/90 text-red-50';
      case 'Dibatalkan (Sudah Dikerjakan)': return 'bg-red-600 hover:bg-red-600/90 text-red-50';
      case 'Tidak Puas (Refund 50%)': return 'bg-pink-500 hover:bg-pink-500/90 text-pink-50';
      case 'Ditutup (Tanpa Refund)': return 'bg-neutral-600 hover:bg-neutral-600/90 text-neutral-50';

      default: return 'bg-gray-500 hover:bg-gray-500/90 text-gray-50';
    }
  };

  return (
    <div className="space-y-6">
        <Card>
            <CardHeader>
                <div className="flex flex-col md:flex-row md:items-start md:justify-between">
                    <div>
                        <CardTitle className="font-headline text-2xl">Pesanan {order.kode_order} - {order.nama_klien}</CardTitle>
                        <CardDescription>
                            Budget: {order.budget} | Total: {formatRupiah(order.total_harga)} ({order.tipe_pembayaran}) | Pekan: {order.pekan}
                        </CardDescription>
                    </div>
                    <Badge className={cn("capitalize w-fit mt-2 md:mt-0", getStatusClass(currentStatus))}>{currentStatus}</Badge>
                </div>
            </CardHeader>
        </Card>
      
      <div className="grid grid-cols-1 lg:grid-cols-12 gap-6 items-start">
        <div className="lg:col-span-12 xl:col-span-5 space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle>Detail Pesanan</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    {order.items.map((item, index) => (
                        <div key={index}>
                            <p className="font-semibold">{item.name} (x{item.quantity})</p>
                            <div className="text-sm text-muted-foreground pl-4 border-l-2 ml-2 mt-1 space-y-2 py-1">
                                {Object.entries(item.brief).map(([question, answer]) => (
                                    <div key={question}>
                                        <p className="font-medium text-foreground/80">{question}</p>
                                        <p>{answer as string}</p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    ))}
                    <Separator />
                    <h3 className="font-semibold pt-2">Info Kontak</h3>
                    <div className="text-sm space-y-1">
                        <p><strong>Nama:</strong> {order.nama_klien}</p>
                        <p><strong>Telegram:</strong> <a href="#" className="text-primary hover:underline">{order.customerTelegram}</a></p>
                    </div>
                </CardContent>
            </Card>
        </div>

        <div className="lg:col-span-6 xl:col-span-4 space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle>Aksi Cepat</CardTitle>
                </CardHeader>
                <CardFooter className="flex flex-col gap-2 items-stretch">
                    <div className='w-full space-y-2'>
                        <label className='text-sm font-medium'>Ubah Status Pesanan</label>
                         <Select value={currentStatus} onValueChange={(value) => setCurrentStatus(value as OrderStatus)}>
                            <SelectTrigger>
                                <SelectValue placeholder="Pilih status baru..." />
                            </SelectTrigger>
                            <SelectContent>
                                {allOrderStatusesCategorized.map((group) => (
                                    <SelectGroup key={group.label}>
                                        <SelectLabel>{group.label}</SelectLabel>
                                        {group.statuses.map(status => (
                                            <SelectItem key={status} value={status}>{status}</SelectItem>
                                        ))}
                                    </SelectGroup>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                    <Button className="w-full mt-2" onClick={handleStatusUpdate} disabled={isSubmittingUpdate}>
                       {isSubmittingUpdate ? (
                            <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Mengirim...</>
                        ) : (
                            <><Send className="mr-2 h-4 w-4" /> Simpan & Kirim Update ke Klien</>
                        )}
                    </Button>
                    <Button variant="secondary" className="w-full">
                        <Video className="mr-2 h-4 w-4" />
                        Jadwalkan Google Meet
                    </Button>
                </CardFooter>
            </Card>
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-2"><History /> Log Aktivitas</CardTitle>
                </CardHeader>
                <CardContent>
                    <ul className="space-y-4 text-sm">
                        {order.log_aktivitas.map((log, index) => (
                            <li key={index} className="flex gap-3">
                                <div className="flex-shrink-0 h-5 w-5 rounded-full bg-primary/20 flex items-center justify-center">
                                    <div className="h-2 w-2 rounded-full bg-primary"></div>
                                </div>
                                <div className="flex-grow">
                                    <p className="font-medium">{log.aksi}</p>
                                    <p className="text-muted-foreground capitalize">{log.oleh} - {new Date(log.waktu).toLocaleString('id-ID')}</p>
                                </div>
                            </li>
                        ))}
                    </ul>
                </CardContent>
            </Card>
        </div>

        <div className="lg:col-span-6 xl:col-span-3 space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle>Integrasi</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-semibold flex items-center gap-2"><Folder className="h-4 w-4" /> Drive Folder</h4>
                      <p className="text-sm text-muted-foreground">
                        {driveUrl ? `Folder telah dibuat.` : 'Folder belum dibuat.'}
                      </p>
                      {driveUrl ? (
                        <Button asChild variant="outline" size="sm" className="mt-2 w-full">
                          <a href={driveUrl} target="_blank" rel="noopener noreferrer">
                            Buka Folder
                          </a>
                        </Button>
                      ) : (
                        <Button variant="outline" size="sm" className="mt-2 w-full" onClick={handleCreateFolder} disabled={isCreatingFolder}>
                          {isCreatingFolder ? (
                            <><FolderSync className="mr-2 h-4 w-4 animate-spin" /> Membuat...</>
                          ) : (
                            'Buat Folder Sekarang'
                          )}
                        </Button>
                      )}
                    </div>
                    <Separator />
                    <div>
                      <h4 className="font-semibold flex items-center gap-2"><MessageSquare className="h-4 w-4" /> Telegram</h4>
                      <p className="text-sm text-muted-foreground">Last activity: 5 mins ago</p>
                      <Button variant="outline" size="sm" className="mt-2 w-full">Open Chat</Button>
                    </div>
                    <Separator />
                    <div>
                      <h4 className="font-semibold flex items-center gap-2"><Calendar className="h-4 w-4" /> Meeting</h4>
                      <p className="text-sm text-muted-foreground">No upcoming meetings</p>
                      <Button variant="outline" size="sm" className="mt-2 w-full">Schedule Now</Button>
                    </div>
                </CardContent>
            </Card>
        </div>
      </div>
    </div>
  );
}
---
--- FILE: src/app/admin/orders/page.tsx ---
'use client';

import React, { useState, useMemo } from 'react';
import Link from 'next/link';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue } from '@/components/ui/select';
import { mockOrders, allOrderStatusesCategorized, mockCustomers } from '@/lib/data';
import { cn } from '@/lib/utils';
import type { OrderStatus } from '@/lib/types';
import { Folder } from 'lucide-react';

export default function AdminOrdersPage() {
  const [filters, setFilters] = useState({
    status: 'All',
    pekan: 'All',
    search: '',
  });

  const filteredOrders = useMemo(() => {
    return mockOrders.filter(order => {
      const statusMatch = filters.status === 'All' || order.status_pesanan === filters.status;
      const pekanMatch = filters.pekan === 'All' || order.pekan === filters.pekan;
      const searchMatch =
        filters.search === '' ||
        order.kode_order.toLowerCase().includes(filters.search.toLowerCase()) ||
        order.nama_klien.toLowerCase().includes(filters.search.toLowerCase());
      return statusMatch && pekanMatch && searchMatch;
    });
  }, [filters]);

  const handleFilterChange = (key: 'status' | 'pekan', value: string) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFilters(prev => ({ ...prev, search: e.target.value }));
  };
  
  const getStatusClass = (status: OrderStatus) => {
    switch (status) {
      // Positive flow
      case 'Masuk Antrian': return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
      case 'Sedang Dikerjakan': return 'bg-blue-500/20 text-blue-700 border-blue-500/30';
      case 'Siap Kirim Pratinjau': return 'bg-cyan-500/20 text-cyan-700 border-cyan-500/30';
      case 'Sedang Direvisi': return 'bg-indigo-500/20 text-indigo-700 border-indigo-500/30';
      case 'Selesai': return 'bg-green-500/20 text-green-700 border-green-500/30';

      // Waiting statuses
      case 'Menunggu Pembayaran': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/30';
      case 'Menunggu Respon Klien': return 'bg-amber-500/20 text-amber-700 border-amber-500/30';
      
      // Action needed statuses
      case 'Perlu Tinjauan Owner': return 'bg-purple-500/20 text-purple-700 border-purple-500/30 font-bold';
      case 'Eskalasi: Revisi di Luar Lingkup': return 'bg-orange-500/20 text-orange-700 border-orange-500/30 font-bold';

      // Negative/Cancellation statuses
      case 'Dibatalkan (Belum Dikerjakan)': return 'bg-red-500/20 text-red-700 border-red-500/30';
      case 'Dibatalkan (Sudah Dikerjakan)': return 'bg-red-600/20 text-red-800 border-red-600/30';
      case 'Tidak Puas (Refund 50%)': return 'bg-pink-500/20 text-pink-700 border-pink-500/30';
      case 'Ditutup (Tanpa Refund)': return 'bg-neutral-500/20 text-neutral-700 border-neutral-500/30';

      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
    }
  };

  const getCustomerId = (customerName: string) => {
    return mockCustomers.find(c => c.name === customerName)?.id || '';
  };

  return (
    <div className="space-y-6">
      <h1 className="text-2xl md:text-3xl font-bold font-headline">Daftar Pesanan</h1>
      
      <Card>
        <CardContent className="p-4 flex flex-col md:flex-row items-center gap-4">
          <Select value={filters.status} onValueChange={value => handleFilterChange('status', value)}>
            <SelectTrigger className="w-full md:w-[220px]">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
                <SelectItem value="All">Semua Status</SelectItem>
                {allOrderStatusesCategorized.map((group) => (
                    <SelectGroup key={group.label}>
                        <SelectLabel>{group.label}</SelectLabel>
                        {group.statuses.map(status => (
                            <SelectItem key={status} value={status}>{status}</SelectItem>
                        ))}
                    </SelectGroup>
                ))}
            </SelectContent>
          </Select>
          <Select value={filters.pekan} onValueChange={value => handleFilterChange('pekan', value)}>
            <SelectTrigger className="w-full md:w-[180px]">
              <SelectValue placeholder="Pekan" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="All">Semua Pekan</SelectItem>
              <SelectItem value="W1">Pekan 1</SelectItem>
              <SelectItem value="W2">Pekan 2</SelectItem>
              <SelectItem value="W3">Pekan 3</SelectItem>
              <SelectItem value="W4">Pekan 4</SelectItem>
            </SelectContent>
          </Select>
          <Input
            placeholder="Cari kode atau nama..."
            value={filters.search}
            onChange={handleSearchChange}
            className="w-full md:flex-1"
          />
        </CardContent>
      </Card>

      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Kode</TableHead>
                <TableHead>Nama</TableHead>
                <TableHead>Budget</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Drive</TableHead>
                <TableHead className="text-right">Aksi</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredOrders.length > 0 ? (
                filteredOrders.map(order => (
                  <TableRow key={order.kode_order}>
                    <TableCell className="font-medium">{order.kode_order}</TableCell>
                    <TableCell>
                       <Link href={`/admin/customers/${getCustomerId(order.nama_klien)}`} className="hover:underline text-primary">
                        {order.nama_klien}
                      </Link>
                    </TableCell>
                    <TableCell>{order.budget}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className={cn("capitalize", getStatusClass(order.status_pesanan))}>
                        {order.status_pesanan}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      {order.driveFolderUrl && (
                        <Button asChild variant="ghost" size="icon">
                          <a href={order.driveFolderUrl} target="_blank" rel="noopener noreferrer" title="Buka Folder Drive">
                            <Folder className="h-4 w-4" />
                          </a>
                        </Button>
                      )}
                    </TableCell>
                    <TableCell className="text-right space-x-2">
                       {order.status_pesanan === 'Masuk Antrian' && <Button size="sm" variant="default">Mulai</Button>}
                       {order.status_pesanan === 'Sedang Dikerjakan' && <Button size="sm" variant="default">Pratinjau</Button>}
                       {order.status_pesanan === 'Sedang Direvisi' && <Button size="sm" variant="default">Update</Button>}
                       {order.status_pesanan === 'Menunggu Respon Klien' && <Button size="sm" variant="outline">Kirim Pengingat</Button>}
                       {order.status_pesanan === 'Perlu Tinjauan Owner' && <Button size="sm" variant="destructive">Tinjau</Button>}
                       <Button asChild size="sm" variant="ghost">
                          <Link href={`/admin/orders/${order.kode_order}`}>Detail</Link>
                       </Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={6} className="text-center h-24">
                    Tidak ada pesanan yang sesuai dengan filter.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/admin/page.tsx ---
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { mockOrders } from "@/lib/data";
import { CheckCircle, Inbox, Loader2 } from "lucide-react";
import type { Order } from '@/lib/types';

const getDashboardStats = (orders: Order[]) => {
  const pesananMasuk = orders.filter(o => o.status_pesanan === 'Masuk Antrian').length;
  const antrianAktif = orders.filter(o => ['Sedang Dikerjakan', 'Sedang Direvisi'].includes(o.status_pesanan)).length;
  const selesaiBulanIni = orders.filter(o => o.status_pesanan === 'Selesai').length;

  const weeklyQueue = {
    W1: orders.filter(o => o.pekan === 'W1').length,
    W2: orders.filter(o => o.pekan === 'W2').length,
    W3: orders.filter(o => o.pekan === 'W3').length,
    W4: orders.filter(o => o.pekan === 'W4').length,
  };

  return { pesananMasuk, antrianAktif, selesaiBulanIni, weeklyQueue };
};

export default function AdminDashboardPage() {
  const { pesananMasuk, antrianAktif, selesaiBulanIni, weeklyQueue } = getDashboardStats(mockOrders);
  const weeklyCapacity = 5;

  return (
    <div className="space-y-8">
      <h1 className="text-2xl md:text-3xl font-bold font-headline">Dashboard</h1>
      
      <section>
        <h2 className="text-xl font-semibold mb-4 text-foreground/80">Statistik Ringkas</h2>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Pesanan Masuk</CardTitle>
              <Inbox className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{pesananMasuk}</div>
              <p className="text-xs text-muted-foreground">Menunggu untuk dikerjakan</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Antrian Aktif</CardTitle>
              <Loader2 className="h-4 w-4 text-muted-foreground animate-spin" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{antrianAktif}</div>
              <p className="text-xs text-muted-foreground">Dalam pengerjaan atau revisi</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Selesai Bulan Ini</CardTitle>
              <CheckCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{selesaiBulanIni}</div>
              <p className="text-xs text-muted-foreground">Total pesanan yang tuntas</p>
            </CardContent>
          </Card>
        </div>
      </section>

      <section>
        <h2 className="text-xl font-semibold mb-4 text-foreground/80">Antrian Minggu Ini</h2>
        <Card>
          <CardContent className="pt-6">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-x-6 gap-y-8">
              {Object.entries(weeklyQueue).map(([pekan, count]) => (
                <div key={pekan} className="space-y-2">
                  <div className="flex justify-between items-baseline">
                    <h3 className="text-sm font-medium">Pekan {pekan.replace('W','')}</h3>
                    <span className="text-sm text-muted-foreground">{count}/{weeklyCapacity}</span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </section>
    </div>
  );
}
---
--- FILE: src/app/admin/payments/page.tsx ---
'use client';

import React, { useState, useMemo } from 'react';
import Link from 'next/link';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { mockOrders } from '@/lib/data';
import { cn, formatRupiah } from '@/lib/utils';

export default function AdminPaymentsPage() {
  const [filters, setFilters] = useState({
    status: 'All',
    search: '',
  });

  const filteredOrders = useMemo(() => {
    return mockOrders.filter(order => {
      const statusMatch = filters.status === 'All' || order.paymentStatus === filters.status;
      const searchMatch =
        filters.search === '' ||
        order.kode_order.toLowerCase().includes(filters.search.toLowerCase()) ||
        order.nama_klien.toLowerCase().includes(filters.search.toLowerCase());
      return statusMatch && searchMatch;
    });
  }, [filters]);

  const handleFilterChange = (value: string) => {
    setFilters(prev => ({ ...prev, status: value }));
  };

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFilters(prev => ({ ...prev, search: e.target.value }));
  };
  
  const getStatusClass = (status: string) => {
    switch (status) {
      case 'Lunas': return 'bg-green-500/20 text-green-700 border-green-500/30';
      case 'DP': return 'bg-blue-500/20 text-blue-700 border-blue-500/30';
      case 'Belum Lunas': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/30';
      case 'Batal': return 'bg-red-500/20 text-red-700 border-red-500/30';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
    }
  };

  return (
    <div className="space-y-6">
      <h1 className="text-2xl md:text-3xl font-bold font-headline">Validasi Pembayaran</h1>
      
      <Card>
        <CardContent className="p-4 flex flex-col md:flex-row items-center gap-4">
          <Select value={filters.status} onValueChange={handleFilterChange}>
            <SelectTrigger className="w-full md:w-[180px]">
              <SelectValue placeholder="Status Pembayaran" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="All">Semua Status</SelectItem>
              <SelectItem value="Lunas">Lunas</SelectItem>
              <SelectItem value="DP">DP</SelectItem>
              <SelectItem value="Belum Lunas">Belum Lunas</SelectItem>
              <SelectItem value="Batal">Batal</SelectItem>
            </SelectContent>
          </Select>
          <Input
            placeholder="Cari kode atau nama..."
            value={filters.search}
            onChange={handleSearchChange}
            className="w-full md:flex-1"
          />
        </CardContent>
      </Card>

      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Kode</TableHead>
                <TableHead>Nama</TableHead>
                <TableHead>Dibayar</TableHead>
                <TableHead>Total Order</TableHead>
                <TableHead>Status Bayar</TableHead>
                <TableHead>Tanggal</TableHead>
                <TableHead className="text-right">Aksi</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredOrders.length > 0 ? (
                filteredOrders.map(order => (
                  <TableRow key={order.kode_order}>
                    <TableCell className="font-medium">
                      <Link href={`/admin/orders/${order.kode_order}`} className="text-primary hover:underline">
                        {order.kode_order}
                      </Link>
                    </TableCell>
                    <TableCell>{order.nama_klien}</TableCell>
                    <TableCell>{formatRupiah(order.jumlah_transfer)}</TableCell>
                    <TableCell>{formatRupiah(order.total_harga)}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className={cn("capitalize", getStatusClass(order.paymentStatus))}>
                        {order.paymentStatus}
                      </Badge>
                    </TableCell>
                    <TableCell>{new Date(order.timestamp).toLocaleDateString('id-ID')}</TableCell>
                    <TableCell className="text-right space-x-2">
                       {order.paymentStatus !== 'Lunas' && order.paymentStatus !== 'Batal' && <Button size="sm" variant="default">Validasi Pembayaran</Button>}
                       {order.paymentStatus === 'Belum Lunas' && <Button size="sm" variant="outline">Kirim Pengingat</Button>}
                       <Button asChild size="sm" variant="ghost">
                          <Link href={`/admin/orders/${order.kode_order}`}>Detail</Link>
                       </Button>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} className="text-center h-24">
                    Tidak ada data pembayaran yang sesuai dengan filter.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/admin/products/page.tsx ---
'use client';

import React, { useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';
import { services, mockCategories } from '@/lib/data';
import { formatRupiah } from '@/lib/utils';
import { PlusCircle, MoreHorizontal } from 'lucide-react';
import type { Service } from '@/lib/types';
import { ProductFormDialog } from '@/components/ProductFormDialog';
import { useToast } from '@/hooks/use-toast';

export default function AdminProductsPage() {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Service | null>(null);
  const { toast } = useToast();

  const handleAddProduct = () => {
    setSelectedProduct(null);
    setIsDialogOpen(true);
  };

  const handleEditProduct = (service: Service) => {
    setSelectedProduct(service);
    setIsDialogOpen(true);
  };

  const handleDeleteProduct = (service: Service) => {
    // In a real app, you'd show a confirmation and then call an API to delete.
    // For now, we just log it and show a toast.
    console.log("Delete product:", service);
    toast({
      title: 'Simulasi Hapus Produk',
      description: `Produk "${service.name}" telah dihapus (simulasi).`,
      variant: 'destructive',
    });
  }
  
  const getCategoryName = (categoryId: string) => {
    return mockCategories.find(c => c.id === categoryId)?.name || categoryId;
  }

  return (
    <>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold font-headline">Manajemen Produk</h1>
            <p className="text-muted-foreground">Kelola layanan dan harga yang Anda tawarkan.</p>
          </div>
          <Button onClick={handleAddProduct}>
            <PlusCircle className="mr-2 h-4 w-4" />
            Tambah Produk
          </Button>
        </div>
        
        <Card>
          <CardContent className="p-0">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Nama Produk</TableHead>
                  <TableHead>Kategori</TableHead>
                  <TableHead>Kaki Lima</TableHead>
                  <TableHead>UMKM</TableHead>
                  <TableHead>E-Comm</TableHead>
                  <TableHead className="text-right">Aksi</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {services.length > 0 ? (
                  services.map((service: Service) => (
                    <TableRow key={service.id}>
                      <TableCell className="font-medium">{service.name}</TableCell>
                      <TableCell>{getCategoryName(service.category)}</TableCell>
                      <TableCell>{formatRupiah(service.prices['kaki-lima'])}</TableCell>
                      <TableCell>{formatRupiah(service.prices['umkm'])}</TableCell>
                      <TableCell>{formatRupiah(service.prices['e-comm'])}</TableCell>
                      <TableCell className="text-right">
                         <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                  <Button variant="ghost" size="icon">
                                      <MoreHorizontal className="h-4 w-4" />
                                      <span className="sr-only">Aksi untuk {service.name}</span>
                                  </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                  <DropdownMenuItem onSelect={() => handleEditProduct(service)}>Edit</DropdownMenuItem>
                                  <DropdownMenuSeparator />
                                  <DropdownMenuItem className="text-destructive focus:bg-destructive/30" onSelect={() => handleDeleteProduct(service)}>Hapus</DropdownMenuItem>
                              </DropdownMenuContent>
                          </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center h-24">
                      Belum ada produk yang ditambahkan.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </div>
      <ProductFormDialog 
        product={selectedProduct}
        isOpen={isDialogOpen}
        onOpenChange={setIsDialogOpen}
      />
    </>
  );
}
---
--- FILE: src/app/admin/refunds/page.tsx ---
'use client';

import React from 'react';
import Link from 'next/link';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { PlusCircle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { formatRupiah } from '@/lib/utils';
import { mockOrders } from '@/lib/data';

export default function AdminRefundsPage() {
  const refunds = mockOrders.filter(order => order.total_refund > 0);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold font-headline">Manajemen Refund</h1>
          <p className="text-muted-foreground">Lacak dan kelola semua permintaan pengembalian dana.</p>
        </div>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Proses Refund Manual
        </Button>
      </div>
      
      <Card>
        <CardHeader>
            <CardTitle>Daftar Refund</CardTitle>
            <CardDescription>Riwayat pengembalian dana yang sedang diproses atau sudah selesai.</CardDescription>
        </CardHeader>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Order ID</TableHead>
                <TableHead>Nama Klien</TableHead>
                <TableHead>Jumlah Refund</TableHead>
                <TableHead>Jenis Potongan</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Aksi</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {refunds.length > 0 ? (
                refunds.map((refund) => (
                  <TableRow key={refund.kode_order}>
                    <TableCell className="font-medium">
                      <Link href={`/admin/orders/${refund.kode_order}`} className="text-primary hover:underline">
                        {refund.kode_order}
                      </Link>
                    </TableCell>
                    <TableCell>{refund.nama_klien}</TableCell>
                    <TableCell>{formatRupiah(refund.total_refund)}</TableCell>
                    <TableCell>{refund.jenis_potongan}</TableCell>
                    <TableCell>
                        <Badge variant={refund.status_refund === 'Sudah' ? 'default' : 'secondary'} className={refund.status_refund === 'Sudah' ? 'bg-green-600' : ''}>
                            {refund.status_refund}
                        </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                       {refund.status_refund === 'Belum' && <Button size="sm" variant="outline">Tandai Sudah Ditransfer</Button>}
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={6} className="text-center h-24">
                    Belum ada data refund.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/admin/settings/budgets/page.tsx ---
'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { budgetItems } from '@/lib/data';
import type { BudgetItem } from '@/lib/types';
import { Edit } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from "@/hooks/use-toast";


export default function AdminBudgetsPage() {
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [selectedBudget, setSelectedBudget] = useState<BudgetItem | null>(null);
    const [editableBudget, setEditableBudget] = useState<BudgetItem | null>(null);
    const { toast } = useToast();

    const handleEditClick = (budget: BudgetItem) => {
        setSelectedBudget(budget);
        setEditableBudget(budget); // Copy to editable state
        setIsDialogOpen(true);
    };

    const handleSaveChanges = () => {
        if (!editableBudget) return;
        // In a real app, this would be an API call.
        console.log("Saving changes for:", editableBudget);
        toast({
            title: "Perubahan Disimpan (Simulasi)",
            description: `Detail untuk budget "${editableBudget.title}" telah diperbarui.`,
        });
        setIsDialogOpen(false);
        setSelectedBudget(null);
    };
    
    const handleFieldChange = (field: keyof Omit<BudgetItem, 'id'>, value: string) => {
        if(editableBudget) {
            setEditableBudget({ ...editableBudget, [field]: value });
        }
    }

    return (
        <>
        <div className="space-y-6">
            <div>
            <h1 className="text-2xl md:text-3xl font-bold font-headline">Tampilan & Budget</h1>
            <p className="text-muted-foreground">Kelola gambar, judul, dan deskripsi untuk setiap tingkatan budget.</p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {budgetItems.map((budget) => (
                <Card key={budget.id}>
                    <CardHeader>
                        <CardTitle>{budget.title}</CardTitle>
                        <CardDescription>{budget.description}</CardDescription>
                    </CardHeader>
                    <CardFooter>
                         <Button variant="outline" className="w-full" onClick={() => handleEditClick(budget)}>
                            <Edit className="mr-2 h-4 w-4" /> Edit
                        </Button>
                    </CardFooter>
                </Card>
            ))}
            </div>
        </div>

        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle>Edit Budget: {selectedBudget?.title}</DialogTitle>
                    <DialogDescription>
                        Ubah detail untuk tingkatan budget ini. Perubahan akan terlihat di halaman pemesanan.
                    </DialogDescription>
                </DialogHeader>
                {editableBudget && (
                    <div className="space-y-4 py-4">
                        <div className="space-y-2">
                            <Label htmlFor="title">Judul</Label>
                            <Input id="title" value={editableBudget.title} onChange={(e) => handleFieldChange('title', e.target.value)} />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="description">Deskripsi</Label>
                            <Textarea id="description" value={editableBudget.description} onChange={(e) => handleFieldChange('description', e.target.value)} />
                        </div>
                        <div className="space-y-2">
                            <Label htmlFor="image">URL Gambar</Label>
                            <Input id="image" value={editableBudget.image} onChange={(e) => handleFieldChange('image', e.target.value)} />
                        </div>
                    </div>
                )}
                <DialogFooter>
                    <Button variant="ghost" onClick={() => setIsDialogOpen(false)}>Batal</Button>
                    <Button onClick={handleSaveChanges}>Simpan Perubahan</Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
        </>
    );
}
---
--- FILE: src/app/admin/settings/capacity/page.tsx ---
'use client';

import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, Check, CheckCircle } from 'lucide-react';

const weeklyPlanningData = [
  { week: 'W1', target: 5, actual: 5, status: 'Full' },
  { week: 'W2', target: 5, actual: 3, status: 'Available' },
  { week: 'W3', target: 5, actual: 0, status: 'Open' },
  { week: 'W4', target: 5, actual: 0, status: 'Open' },
];

export default function AdminCapacityPage() {

  const getStatusBadge = (status: string, slots: number) => {
    switch (status) {
      case 'Full':
        return <Badge variant="destructive"><Check className="mr-1 h-3 w-3" /> Full</Badge>;
      case 'Available':
        return <Badge variant="outline"><AlertTriangle className="mr-1 h-3 w-3" /> Available ({slots} slot)</Badge>;
      case 'Open':
        return <Badge variant="secondary"><CheckCircle className="mr-1 h-3 w-3" /> Open</Badge>;
      default:
        return <Badge>{status}</Badge>;
    }
  };

  return (
    <div className="space-y-8">
      <div className="flex flex-wrap items-center justify-between gap-4">
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Pengaturan Kapasitas Order</h1>
        <div className="flex gap-2 flex-shrink-0">
            <Button variant="outline">Emergency Override</Button>
            <Button>Update Limits</Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
        <div className="lg:col-span-2 space-y-8">
            <Card>
                <CardHeader>
                    <CardTitle>Order Limits</CardTitle>
                    <CardDescription>Atur batas pesanan mingguan dan bulanan, serta slot darurat.</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="space-y-2">
                        <Label htmlFor="weekly-limit">Limit Mingguan</Label>
                        <Input id="weekly-limit" type="number" defaultValue="5" placeholder="Order/minggu" />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="monthly-limit">Limit Bulanan</Label>
                        <Input id="monthly-limit" type="number" defaultValue="20" placeholder="Order/bulan" />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="emergency-buffer">Buffer Emergency</Label>
                        <Input id="emergency-buffer" type="number" defaultValue="2" placeholder="Slot darurat"/>
                    </div>
                </CardContent>
                <CardFooter>
                    <Button variant="secondary">Reset Counter</Button>
                </CardFooter>
            </Card>
            
            <Card>
                <CardHeader>
                    <CardTitle>Weekly Capacity Planning</CardTitle>
                    <CardDescription>Rencanakan dan pantau target kapasitas mingguan Anda.</CardDescription>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader>
                        <TableRow>
                            <TableHead>Minggu</TableHead>
                            <TableHead>Target</TableHead>
                            <TableHead>Aktual</TableHead>
                            <TableHead>Status</TableHead>
                        </TableRow>
                        </TableHeader>
                        <TableBody>
                        {weeklyPlanningData.map((item) => (
                            <TableRow key={item.week}>
                                <TableCell className="font-medium">{item.week}</TableCell>
                                <TableCell>{item.target}</TableCell>
                                <TableCell>{item.actual}</TableCell>
                                <TableCell>{getStatusBadge(item.status, item.target - item.actual)}</TableCell>
                            </TableRow>
                        ))}
                        </TableBody>
                    </Table>
                </CardContent>
                 <CardFooter className="gap-2">
                    <Button variant="outline">Edit Weekly Targets</Button>
                    <Button variant="secondary">Block Specific Weeks</Button>
                </CardFooter>
            </Card>
        </div>

        <div className="lg:col-span-1">
             <Card className="sticky top-24">
                <CardHeader>
                    <CardTitle>Status Saat Ini</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div>
                        <div className="flex justify-between items-baseline mb-1">
                            <span className="text-sm font-medium">Minggu ini</span>
                            <span className="text-sm text-muted-foreground">3/5 (60%)</span>
                        </div>
                    </div>
                    <div>
                         <div className="flex justify-between items-baseline mb-1">
                            <span className="text-sm font-medium">Bulan ini</span>
                            <span className="text-sm text-muted-foreground">12/20 (60%)</span>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>

      </div>
    </div>
  );
}
---
--- FILE: src/app/admin/settings/integrations/page.tsx ---
'use client';

import React from 'react';
import Link from 'next/link';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Send, Folder, Video, Calendar, CheckCircle, XCircle, KeyRound, Info } from 'lucide-react';

const integrations = [
  {
    id: 'telegram',
    title: 'Telegram Bot',
    description: 'Kirim notifikasi order, pengingat pembayaran, dan handle revisi otomatis.',
    icon: Send,
    connected: true,
    href: '/admin/automation/telegram',
  },
  {
    id: 'google-drive',
    title: 'Google Drive',
    description: 'Buat folder project otomatis untuk setiap pesanan dan kelola file dengan mudah.',
    icon: Folder,
    connected: true,
    href: '/admin/automation/drive',
  },
  {
    id: 'google-meet',
    title: 'Google Meet',
    description: 'Jadwalkan meeting konsultasi otomatis untuk customer dengan revisi berlebih.',
    icon: Video,
    connected: true,
    href: '/admin/automation/meet',
  },
  {
    id: 'google-calendar',
    title: 'Google Calendar',
    description: 'Sinkronkan jadwal meeting dan deadline project langsung ke kalender Anda.',
    icon: Calendar,
    connected: true,
    href: '/admin/automation/calendar',
  },
];

export default function AdminIntegrationsPage() {
  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold font-headline">Kelola Integrasi</h1>
        <p className="text-muted-foreground">Hubungkan Urgent Studio dengan layanan pihak ketiga untuk otomasi alur kerja Anda.</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card className="md:col-span-2 border-primary">
            <CardHeader>
                <CardTitle className="flex items-center gap-2">
                    <KeyRound className="h-6 w-6 text-primary" /> Panduan Deployment: Menyimpan Kunci Rahasia (Secret)
                </CardTitle>
                <CardDescription>
                    Langkah-langkah ini **hanya diperlukan saat Anda siap mempublikasikan aplikasi ke internet**.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <Alert>
                    <Info className="h-4 w-4" />
                    <AlertTitle>Informasi Penagihan (Billing)</AlertTitle>
                    <AlertDescription>
                        Google Cloud mungkin akan meminta Anda untuk mengaktifkan akun penagihan. Ini adalah syarat standar, bahkan untuk layanan gratis.
                        <strong className="block mt-2">Anda TIDAK PERLU melakukan ini sekarang.</strong> 
                        Semua fitur yang kita bangun berfungsi penuh di lingkungan pengembangan ini hanya dengan menggunakan file <code>.env</code>.
                    </AlertDescription>
                </Alert>
                <ol className="list-decimal list-inside space-y-4 text-sm pt-4">
                    <li>
                        Buka halaman <strong>Secret Manager</strong> di Google Cloud Console menggunakan tombol di bawah. Pastikan proyek yang terpilih sudah benar (`urgent-studio`).
                    </li>
                    <li>
                        Klik <strong>+ CREATE SECRET</strong> di bagian atas.
                    </li>
                    <li>
                        Untuk nama Secret, masukkan persis: <code>DRIVE_SERVICE_ACCOUNT_JSON</code>.
                        <div className="mt-2 p-3 border rounded-md bg-muted/50">
                            <p>Di bagian <strong>Secret value</strong>, salin dan tempel <strong>seluruh isi</strong> file JSON service account Anda (mulai dari <code>{'{'}</code> hingga <code>{'}'}</code>).</p>
                        </div>
                    </li>
                    <li>
                        Biarkan pengaturan lain sebagai default dan klik <strong>Create secret</strong>.
                    </li>
                    <li>
                        Ulangi proses ini untuk kunci lainnya. Buat secret baru dengan nama dan nilai berikut:
                        <ul className="list-disc list-inside ml-4 mt-2 space-y-2">
                            <li>Nama: <code>DRIVE_PARENT_FOLDER_ID</code>, Nilai: ID folder utama Drive Anda.</li>
                            <li>Nama: <code>TELEGRAM_BOT_TOKEN</code>, Nilai: Token bot Telegram Anda.</li>
                        </ul>
                    </li>
                     <li>
                        <strong>Penting (Izin Akses):</strong> Setelah membuat secret, Anda harus memberikan izin kepada service account App Hosting untuk mengaksesnya. Klik pada nama secret yang baru dibuat, pergi ke tab <strong>Permissions</strong>, klik <strong>+ GRANT ACCESS</strong>, dan tambahkan service account App Hosting Anda (biasanya bernama <code>service-PROJECT_NUMBER@gcp-sa-apphosting.iam.gserviceaccount.com</code>) dengan peran <strong>Secret Manager Secret Accessor</strong>. Lakukan ini untuk semua secret yang Anda buat.
                    </li>
                </ol>
            </CardContent>
            <CardFooter>
                <Button asChild className="w-full">
                    <a href="https://console.cloud.google.com/security/secret-manager" target="_blank" rel="noopener noreferrer">
                        Buka Firebase Secret Manager (untuk nanti)
                    </a>
                </Button>
            </CardFooter>
        </Card>

        {integrations.map((integration) => (
          <Card key={integration.id} className="flex flex-col">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-4">
                  <integration.icon className="h-10 w-10 text-primary" />
                  <div>
                    <CardTitle>{integration.title}</CardTitle>
                    <CardDescription>{integration.description}</CardDescription>
                  </div>
                </div>
                {integration.connected ? (
                   <Badge variant="outline" className="border-green-500/30 bg-green-500/20 text-green-700">
                        <CheckCircle className="mr-1 h-3 w-3" /> Terhubung
                   </Badge>
                ) : (
                    <Badge variant="destructive">
                        <XCircle className="mr-1 h-3 w-3" /> Terputus
                    </Badge>
                )}
              </div>
            </CardHeader>
            <CardFooter className="mt-auto bg-muted/50 p-4 border-t">
              <Button asChild variant="outline" className="w-full">
                <Link href={integration.href}>
                  {integration.connected ? 'Kelola Pengaturan' : 'Hubungkan Sekarang'}
                </Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}
---
--- FILE: src/app/admin/settings/user-mgmt/page.tsx ---
'use client';

import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { mockAdminUsers } from '@/lib/data';
import { cn } from '@/lib/utils';
import { MoreHorizontal, PlusCircle } from 'lucide-react';
import type { AdminUser } from '@/lib/types';

export default function AdminUserManagementPage() {
  
  const getStatusClass = (status: string) => {
    switch (status) {
      case 'Active': return 'bg-green-500/20 text-green-700 border-green-500/30';
      case 'Inactive': return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
    }
  };

  const getRoleClass = (role: string) => {
    switch (role) {
      case 'Admin': return 'bg-primary/20 text-primary border-primary/30';
      case 'Designer': return 'bg-blue-500/20 text-blue-700 border-blue-500/30';
      case 'Marketing': return 'bg-orange-500/20 text-orange-700 border-orange-500/30';
      default: return '';
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
            <h1 className="text-2xl md:text-3xl font-bold font-headline">User Management</h1>
            <p className="text-muted-foreground">Kelola pengguna dan peran di panel admin.</p>
        </div>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Add User
        </Button>
      </div>
      
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>User</TableHead>
                <TableHead>Role</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockAdminUsers.length > 0 ? (
                mockAdminUsers.map((user: AdminUser) => (
                  <TableRow key={user.id}>
                    <TableCell className="font-medium">
                        <div className="flex items-center gap-3">
                            <Avatar>
                                <AvatarImage src={user.avatar} alt={user.name} data-ai-hint="user avatar" />
                                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                            </Avatar>
                            <div>
                                <p>{user.name}</p>
                                <p className="text-sm text-muted-foreground">{user.email}</p>
                            </div>
                        </div>
                    </TableCell>
                    <TableCell>
                        <Badge variant="outline" className={cn(getRoleClass(user.role))}>{user.role}</Badge>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className={cn("capitalize", getStatusClass(user.status))}>
                        {user.status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                       <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                                <Button variant="ghost" size="icon">
                                    <MoreHorizontal className="h-4 w-4" />
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                                <DropdownMenuItem>Edit</DropdownMenuItem>
                                <DropdownMenuItem>{user.status === 'Active' ? 'Deactivate' : 'Activate'}</DropdownMenuItem>
                                <DropdownMenuItem className="text-destructive">Delete</DropdownMenuItem>
                            </DropdownMenuContent>
                        </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={4} className="text-center h-24">
                    No users found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
---
--- FILE: src/app/api/sheet-sync/route.ts ---
import { NextResponse } from 'next/server';
import { syncOrderFromSheet } from '@/ai/flows/sync-from-sheet';

// This is the webhook endpoint that Google Apps Script will call.
// It receives data from the spreadsheet and passes it to a Genkit flow.
export async function POST(request: Request) {
  try {
    // We'll add a secret key check here later for security.
    const payload = await request.json();
    
    console.log("Webhook received from Google Sheet:", payload);

    // Don't wait for the flow. Respond immediately to Google Sheets.
    syncOrderFromSheet(payload);

    return NextResponse.json({ status: 'ok', message: 'Data received.' });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('Error processing Google Sheet webhook:', errorMessage);
    
    // Return a server error status
    return NextResponse.json({ status: 'error', message: errorMessage }, { status: 500 });
  }
}
---
--- FILE: src/app/api/telegram/webhook/route.ts ---
import { NextResponse } from 'next/server';
import { processTelegramWebhook } from '@/ai/flows/telegram-bot-responder';

// This is the endpoint that Telegram will call when a user sends a message to the bot.
// You need to set this webhook URL in your bot's settings via the Telegram API.
// e.g., https://api.telegram.org/bot<YOUR_BOT_TOKEN>/setWebhook?url=<YOUR_APP_URL>/api/telegram/webhook
export async function POST(request: Request) {
  try {
    const payload = await request.json();
    
    // Don't wait for the flow to finish. Respond to Telegram immediately
    // to prevent timeouts and retries. The flow will run in the background.
    processTelegramWebhook(payload);

    return NextResponse.json({ status: 'ok' });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('Error processing Telegram webhook:', errorMessage);
    
    // Still return a success status code to prevent Telegram from retrying on a malformed request.
    return NextResponse.json({ status: 'error', message: errorMessage }, { status: 200 });
  }
}
---
--- FILE: src/app/catalog/[budget]/layout.tsx ---
export default function CatalogLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { budget: string };
}) {
  return <>{children}</>;
}
---
--- FILE: src/app/catalog/[budget]/page.tsx ---
"use client";

import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import { ServiceCard } from '@/components/ServiceCard';
import { services, mockCategories } from '@/lib/data';
import { notFound, useParams } from 'next/navigation';
import { CartProvider } from '@/contexts/CartContext';

const getCategoryBySlug = (slug: string) => {
    return mockCategories.find(c => c.id === slug);
}

const getServicesByCategory = (categoryId: string) => {
  return services.filter(service => service.category === categoryId);
};

// The param is named `budget` due to the folder structure [budget]
function CategoryPageContent() {
    const params = useParams();
    const budget = params.budget as string;
    const category = getCategoryBySlug(budget); // Use budget from params hook
    
    if (!category) {
        notFound();
    }
    
    const categoryServices = getServicesByCategory(category.id);

    return (
        <div className="flex flex-col min-h-screen">
            <Header />
            <main className="flex-grow container mx-auto px-4 py-12 md:py-16">
                <div className="mb-12">
                <h1 className="text-4xl font-bold font-headline tracking-tight">{category.name}</h1>
                <p className="mt-2 text-lg text-muted-foreground">
                    Semua layanan yang kami tawarkan untuk kategori {category.name}.
                </p>
                </div>
                <div className="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {categoryServices.map((service) => (
                    <ServiceCard key={service.id} service={service} />
                ))}
                </div>
            </main>
            <Footer />
        </div>
    );
}

// The param is named `budget` due to the folder structure [budget]
export default function CatalogPage() {
  return (
    <CartProvider>
      <CategoryPageContent />
    </CartProvider>
  )
}
---
--- FILE: src/app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .no-scrollbar::-webkit-scrollbar {
      display: none;
  }
  .no-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
}

@layer base {
  :root {
    --background: 0 0% 98%; /* stone 50 */
    --foreground: 0 0% 9%; /* stone 950 */
    --card: 0 0% 100%;
    --card-foreground: 0 0% 9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 9%;
    --primary: 0 0% 9%; /* stone 950 */
    --primary-foreground: 0 0% 98%; /* stone 50 */
    --secondary: 0 0% 96.1%; /* stone 100 */
    --secondary-foreground: 0 0% 9%; /* stone 950 */
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%; /* stone 600 */
    --accent: 0 0% 96.1%; /* stone 100 */
    --accent-foreground: 0 0% 9%; /* stone 950 */
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%; /* stone 200 */
    --input: 0 0% 89.8%;
    --ring: 0 0% 9%;
    --chart-1: 0 0% 50%;
    --chart-2: 0 0% 70%;
    --chart-3: 0 0% 30%;
    --chart-4: 0 0% 60%;
    --chart-5: 0 0% 40%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 100%;
    --sidebar-foreground: 0 0% 9%;
    --sidebar-primary: 0 0% 9%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 0 0% 96.1%;
    --sidebar-accent-foreground: 0 0% 9%;
    --sidebar-border: 0 0% 89.8%;
    --sidebar-ring: 0 0% 9%;
  }
  .dark {
    --background: 0 0% 3.9%; /* stone 950 */
    --foreground: 0 0% 98%; /* stone 50 */
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%; /* stone 50 */
    --primary-foreground: 0 0% 9%; /* stone 950 */
    --secondary: 0 0% 14.9%; /* stone 800 */
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%; /* stone 400 */
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%; /* stone 300 */
    --chart-1: 0 0% 50%;
    --chart-2: 0 0% 30%;
    --chart-3: 0 0% 70%;
    --chart-4: 0 0% 40%;
    --chart-5: 0 0% 60%;
    --sidebar-background: 0 0% 3.9%;
    --sidebar-foreground: 0 0% 98%;
    --sidebar-primary: 0 0% 98%;
    --sidebar-primary-foreground: 0 0% 9%;
    --sidebar-accent: 0 0% 14.9%;
    --sidebar-accent-foreground: 0 0% 98%;
    --sidebar-border: 0 0% 14.9%;
    --sidebar-ring: 0 0% 83.1%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
---
--- FILE: src/app/layout.tsx ---
import type {Metadata} from 'next';
import { Inter, Poppins } from 'next/font/google';
import './globals.css';
import { Toaster } from "@/components/ui/toaster"
import { cn } from '@/lib/utils';

export const metadata: Metadata = {
  title: 'Urgent Studio',
  description: 'yang urgent-urgent aja',
};

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
});

const poppins = Poppins({
  subsets: ['latin'],
  display: 'swap',
  weight: ['600', '700'],
  variable: '--font-poppins',
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="light">
      <body className={cn(
        "font-body antialiased overflow-x-hidden",
        inter.variable,
        poppins.variable
      )}>
        {children}
        <Toaster />
      </body>
    </html>
  );
}
---
--- FILE: src/app/page.tsx ---
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import { PortfolioSection } from '@/components/PortfolioSection';
import { ProductCarousel } from '@/components/ProductCarousel';
import { PromotionalBannerCarousel } from '@/components/PromotionalBannerCarousel';
import { CouponInfoSection } from '@/components/CouponInfoSection';
import { TrackOrderForm } from '@/components/TrackOrderForm';
import { OrderSummary } from '@/components/OrderSummary';
import { FloatingCart } from '@/components/FloatingCart';
import { CartWrapper } from '@/components/CartWrapper';
import { services, mockCategories } from '@/lib/data';

export default function Home() {
  const categoryOrder = [
    'Konten Media Sosial',
    'Branding & Kantor',
    'Materi Promosi',
    'Desain Digital & Event',
  ];

  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <CartWrapper>
        <main className="flex-grow">
          <PortfolioSection />
          <PromotionalBannerCarousel />

          {/* Catalog */}
          <section id="catalog-section" className="pt-10 pb-16">
            <div className="container mx-auto px-4 space-y-8">
              {categoryOrder.map((categoryName) => {
                const category = mockCategories.find(c => c.name === categoryName);
                if (!category) return null;

                const servicesInCategory = services.filter(s => s.category === category.id);
                if (servicesInCategory.length === 0) return null;

                return (
                  <div key={category.id}>
                    <ProductCarousel
                      title={category.name}
                      services={servicesInCategory}
                      categoryId={category.id}
                    />
                    {category.name === 'Branding & Kantor' && <CouponInfoSection />}
                  </div>
                );
              })}
            </div>
          </section>

          {/* Desktop-only Track Order & Order Summary */}
          <section id="summary-section" className="hidden md:block container mx-auto px-4 pb-16">
            <div className="grid lg:grid-cols-2 gap-12 items-start">
              <div>
                <h2 className="text-2xl font-headline font-semibold text-foreground text-center mb-10">Lacak Status Pesanan Anda</h2>
                <TrackOrderForm />
              </div>
              <div>
                <h2 className="text-2xl font-headline font-semibold text-foreground text-center mb-10">Periksa & Kirim Pesanan Anda</h2>
                <OrderSummary />
              </div>
            </div>
          </section>
        </main>
        <FloatingCart />
      </CartWrapper>
      <Footer />
    </div>
  );
}
---
--- FILE: src/app/portfolio/page.tsx ---
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import Image from 'next/image';

const portfolioItems = [
  { src: 'https://placehold.co/600x400.png', alt: 'Project 1', hint: 'logo design' },
  { src: 'https://placehold.co/600x400.png', alt: 'Project 2', hint: 'social media' },
  { src: 'https://placehold.co/600x400.png', alt: 'Project 3', hint: 'brochure' },
  { src: 'https://placehold.co/600x400.png', alt: 'Project 4', hint: 'packaging' },
  { src: 'https://placehold.co/600x400.png', alt: 'Project 5', hint: 'web design' },
  { src: 'https://placehold.co/600x400.png', alt: 'Project 6', hint: 'poster' },
];

export default function PortfolioPage() {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow container mx-auto px-4 py-12 md:py-16">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold font-headline tracking-tight">Portofolio Kami</h1>
          <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
            Beberapa hasil karya terbaik yang pernah kami buat untuk klien-klien hebat.
          </p>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {portfolioItems.map((item, index) => (
            <div key={index} className="overflow-hidden rounded-lg shadow-lg group">
              <Image 
                src={item.src}
                alt={item.alt}
                width={600}
                height={400}
                className="w-full object-cover transition-transform duration-300 group-hover:scale-105"
                data-ai-hint={item.hint}
              />
            </div>
          ))}
        </div>
      </main>
      <Footer />
    </div>
  );
}
---
--- FILE: src/app/track/page.tsx ---
'use client';

import React from 'react';
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import { TrackOrderForm } from '@/components/TrackOrderForm';

export default function TrackOrderPage() {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow container mx-auto px-4 py-16 flex items-center justify-center">
        <TrackOrderForm />
      </main>
      <Footer />
    </div>
  );
}
---
--- FILE: src/components/AdminHeader.tsx ---
import Link from 'next/link';
import { UserCircle, LogOut } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { SidebarTrigger } from './ui/sidebar';

export function AdminHeader() {
  return (
    <header className="flex h-14 items-center gap-4 border-b bg-background px-4 md:px-6 sticky top-0 z-30">
        <SidebarTrigger className="md:hidden" />
        <div className="flex-1">
            <Link href="/admin">
                <h1 className="text-xl font-headline font-bold text-foreground">
                    Urgent Studio - Admin Panel
                </h1>
            </Link>
        </div>
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon" className="rounded-full">
                    <UserCircle className="h-6 w-6" />
                    <span className="sr-only">Toggle user menu</span>
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
                <DropdownMenuLabel>Admin Account</DropdownMenuLabel>
                <DropdownMenuSeparator />
                <DropdownMenuItem>Profile</DropdownMenuItem>
                <DropdownMenuItem>
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Log out</span>
                </DropdownMenuItem>
            </DropdownMenuContent>
        </DropdownMenu>
    </header>
  );
}
---
--- FILE: src/components/CartWrapper.tsx ---
"use client";

import { CartProvider } from '@/contexts/CartContext';
import React from 'react';

export function CartWrapper({ children }: { children: React.ReactNode }) {
  return (
    <CartProvider>
      {children}
    </CartProvider>
  );
}
---
--- FILE: src/components/CouponInfoSection.tsx ---
'use client';

import React, { useState } from 'react';
import Image from 'next/image';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { mockCoupons } from "@/lib/data";
import { Copy, Check } from "lucide-react";
import type { Coupon } from '@/lib/types';

export function CouponInfoSection() {
    const { toast } = useToast();
    const [copiedCode, setCopiedCode] = useState<string | null>(null);

    // Only display the NEWBIE20 coupon.
    const activeCoupons = mockCoupons.filter(c => c.status === 'Aktif' && c.code === 'NEWBIE20');

    const handleCopy = (code: string) => {
        navigator.clipboard.writeText(code).then(() => {
            setCopiedCode(code);
            toast({
                title: "Kode Kupon Disalin!",
                description: `Kode "${code}" telah disalin ke clipboard.`,
            });
            setTimeout(() => setCopiedCode(null), 2000);
        }).catch(err => {
            console.error('Failed to copy text: ', err);
            toast({
                title: 'Gagal Menyalin Kode',
                description: 'Coba salin secara manual.',
                variant: 'destructive',
            });
        });
    };

    if (activeCoupons.length === 0) {
        return null;
    }

    return (
        <section className="container mx-auto px-4 py-12 md:py-16">
            <div className="grid grid-cols-1 md:max-w-2xl mx-auto gap-8">
                {activeCoupons.map((coupon: Coupon) => (
                     <Card key={coupon.id} className="overflow-hidden flex flex-col md:flex-row items-center shadow-lg h-full">
                        <div className="w-full md:w-1/3 shrink-0">
                            <Image
                                src='https://placehold.co/400x400.png'
                                alt={`Promo ${coupon.code}`}
                                width={400}
                                height={400}
                                className="object-cover w-full h-48 md:h-full"
                                data-ai-hint="coupon gift"
                            />
                        </div>
                        <div className="p-6 flex-1 flex flex-col justify-center h-full w-full">
                            {coupon.code === 'NEWBIE20' && (
                                <CardHeader className="p-0 mb-2">
                                    <CardTitle>Spesial Pengguna Baru</CardTitle>
                                </CardHeader>
                            )}
                            <CardContent className="p-0">
                                <div className="flex items-center justify-between rounded-lg border-2 border-dashed bg-muted p-3">
                                    <p className="font-mono text-lg font-bold text-primary">{coupon.code}</p>
                                    <Button size="sm" onClick={() => handleCopy(coupon.code)} className='shrink-0'>
                                        {copiedCode === coupon.code ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                                        <span className="ml-2 hidden sm:inline">{copiedCode === coupon.code ? 'Disalin' : 'Salin Kupon'}</span>
                                    </Button>
                                </div>
                                <p className="text-muted-foreground text-sm mt-2">
                                    Gunakan kode ini saat checkout untuk mendapatkan diskon sebesar {coupon.discount}.
                                </p>
                            </CardContent>
                        </div>
                    </Card>
                ))}
            </div>
        </section>
    );
}
---
--- FILE: src/components/FloatingCart.tsx ---
"use client";

import { motion, useAnimationControls } from "framer-motion";
import { ShoppingCart, PackageSearch } from 'lucide-react';
import { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from "@/components/ui/sheet";
import { useCart } from "@/contexts/CartContext";
import { OrderSummary } from "./OrderSummary";
import { useIsMobile } from '@/hooks/use-mobile';
import { useEffect } from "react";
import Link from "next/link";

export function FloatingCart() {
  const isMobile = useIsMobile();
  const { totalItems, cartShake } = useCart();
  const controls = useAnimationControls();

  useEffect(() => {
    if (cartShake > 0) {
      controls.start({
        scale: [1, 1.3, 1],
        rotate: [0, -10, 10, -5, 5, 0],
        transition: { duration: 0.5, type: "spring" }
      });
    }
  }, [cartShake, controls]);

  if (!isMobile) {
    return null;
  }

  return (
    <>
      {/* Spacer to prevent content from being hidden behind the fixed nav bar */}
      <div className="block h-16 md:hidden" /> 

      <motion.div 
          className="fixed bottom-0 left-0 right-0 z-40 block border-t bg-background/95 backdrop-blur-sm md:hidden"
          initial={{ y: 100 }}
          animate={{ y: 0 }}
          transition={{ type: "spring", stiffness: 300, damping: 30 }}
      >
          <div className="container mx-auto grid h-16 grid-cols-2 items-stretch divide-x divide-border">
              <Link
                href="/track"
                className="flex flex-col items-center justify-center gap-1 text-xs font-medium text-muted-foreground hover:text-primary transition-colors"
              >
                <PackageSearch className="h-6 w-6" />
                <span>Lacak Pesanan</span>
              </Link>
              
              {/* Sheet for Order Summary */}
              <Sheet>
                <SheetTrigger asChild>
                    <button className="relative h-full flex flex-col items-center justify-center gap-1 text-xs font-medium rounded-none text-muted-foreground hover:text-primary transition-colors">
                        {totalItems > 0 && (
                            <span className="absolute left-[calc(50%+1.25rem)] top-2 flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs font-bold text-primary-foreground">
                                {totalItems}
                            </span>
                        )}
                        <motion.div animate={controls}>
                          <ShoppingCart className="h-6 w-6" />
                        </motion.div>
                        <span >Rincian Pesanan</span>
                    </button>
                </SheetTrigger>
                <SheetContent side="bottom" className="rounded-t-2xl p-0 max-h-[90vh] flex flex-col">
                  <SheetHeader>
                    <SheetTitle className="sr-only">Ringkasan Pesanan</SheetTitle>
                  </SheetHeader>
                  <OrderSummary />
                </SheetContent>
              </Sheet>
          </div>
      </motion.div>
    </>
  );
}
---
--- FILE: src/components/Footer.tsx ---
export function Footer() {
  return (
    <footer className="py-6 px-4 md:px-6 mt-12 border-t">
      <div className="container mx-auto text-center text-muted-foreground">
        <p>&copy; {new Date().getFullYear()} Urgent Studio. All rights reserved.</p>
      </div>
    </footer>
  );
}
---
--- FILE: src/components/Header.tsx ---
import Link from 'next/link';
import { Sparkles } from 'lucide-react';

export function Header() {
  return (
    <header className="py-4 px-4 md:px-6 bg-background/80 backdrop-blur-sm sticky top-0 z-40 border-b">
      <div className="container mx-auto flex items-center justify-between">
        <Link href="/" className="flex items-center gap-2">
          <Sparkles className="h-8 w-8 text-primary" />
          <h1 className="text-2xl font-headline font-bold text-foreground">
            Urgent Studio
          </h1>
        </Link>
      </div>
    </header>
  );
}
---
--- FILE: src/components/OrderSummary.tsx ---
"use client";

import { useCart } from "@/contexts/CartContext";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ShoppingCart, Trash2, Percent, CheckCircle, User, Phone, Send } from "lucide-react";
import { formatRupiah } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";
import { sendTelegramUpdate } from '@/ai/flows/telegram-bot-integration';
import { createOrderFolder } from '@/ai/flows/create-drive-folder';
import { useState, useEffect } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import type { Customer } from "@/lib/types";

// Form Schema
const customerInfoFormSchema = z.object({
  name: z.string().min(2, { message: "Nama harus diisi, minimal 2 karakter." }),
  phone: z.string().min(10, { message: "Nomor telepon tidak valid." }),
  telegram: z.string().min(3, { message: "Username Telegram tidak valid." }).startsWith('@', { message: 'Username harus diawali dengan @' }),
});
type CustomerInfoFormValues = z.infer<typeof customerInfoFormSchema>;


export function OrderSummary() {
    const { cartItems, totalPrice, totalItems, paymentMethod, setPaymentMethod, removeItem, clearCart } = useCart();
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);

    const form = useForm<CustomerInfoFormValues>({
        resolver: zodResolver(customerInfoFormSchema),
        defaultValues: { name: "", phone: "", telegram: "" },
    });

    useEffect(() => {
        const savedCustomerData = localStorage.getItem('customerData');
        if (savedCustomerData) {
            const customer = JSON.parse(savedCustomerData);
            form.reset(customer);
        }
    }, [form]);

    const handleSubmitOrder = async () => {
        const isFormValid = await form.trigger();

        if (!isFormValid) {
             toast({
                title: 'Data Diri Belum Lengkap',
                description: 'Mohon isi nama, telepon, dan username Telegram Anda dengan benar.',
                variant: 'destructive',
            });
            return;
        }

        if (totalItems === 0) {
            toast({
                title: 'Keranjang Kosong',
                description: 'Silakan tambahkan layanan ke keranjang Anda.',
                variant: 'destructive',
            });
            return;
        }
        
        const customer = form.getValues();
        localStorage.setItem('customerData', JSON.stringify(customer));

        setIsSubmitting(true);
        const orderId = `#${String(Math.floor(1000 + Math.random() * 9000)).padStart(4, '0')}`;
        let folderUrl = 'Tidak dibuat (konfigurasi .env belum lengkap)';
        let folderCreationError = '';

        try {
            const folderResult = await createOrderFolder({
                orderId: orderId,
                customerName: customer.name,
                folderTemplate: '[OrderID] - [CustomerName]',
            });

            if (folderResult.success && folderResult.folderUrl) {
                folderUrl = folderResult.folderUrl;
            } else {
                folderCreationError = folderResult.error || 'Gagal membuat folder di Google Drive.';
            }
        } catch (error: any) {
            console.error("Failed to create Drive folder:", error);
            folderCreationError = error.message || 'Terjadi kesalahan saat menghubungi layanan Drive.';
        }

        const orderDetails = cartItems.map(item => `- ${item.name} (${item.budgetName}) (x${item.quantity})`).join('\n');
        const message = `✅ *Pesanan Baru Diterima!*\n\n*Order ID:* \`${orderId}\`\n*Nama:* ${customer.name}\n*Telegram:* ${customer.telegram}\n\n*Rincian Pesanan:*\n${orderDetails}\n\n*Total Tagihan:* ${formatRupiah(totalPrice)}\n*Metode Bayar:* ${paymentMethod === 'dp' ? 'DP 50%' : 'Lunas'}\n\n*Folder Google Drive:*\n${folderUrl}\n\nTerima kasih! Tim kami akan segera memprosesnya.`;

        try {
            const telegramResult = await sendTelegramUpdate({
                telegramId: customer.telegram,
                message: message,
            });

            if (telegramResult.success) {
                toast({
                    title: 'Pesanan Terkirim!',
                    description: `Pesanan ${orderId} sedang diproses. Cek Telegram untuk konfirmasi.`,
                });
                if (folderCreationError) {
                    toast({
                        title: 'Catatan Google Drive',
                        description: folderCreationError,
                        variant: 'destructive'
                    });
                }
                clearCart();
            } else {
                 toast({
                    title: 'Gagal Mengirim Notifikasi',
                    description: telegramResult.error || 'Pastikan Anda sudah memulai chat dengan bot kami.',
                    variant: 'destructive',
                });
            }
        } catch (error: any) {
            console.error("Failed to send order via Telegram:", error);
            toast({
                title: 'Gagal Mengirim Pesanan',
                description: error.message || 'Terjadi kesalahan. Silakan coba lagi.',
                variant: 'destructive',
            });
        } finally {
            setIsSubmitting(false);
        }
    };

    const finalPrice = paymentMethod === 'dp' ? totalPrice / 2 : totalPrice;

    return (
        <Card className="shadow-lg border-border flex flex-col h-full bg-background">
            <CardHeader>
                <CardTitle className="font-headline flex items-center gap-2">
                    <ShoppingCart className="h-6 w-6" />
                    Ringkasan Pesanan
                </CardTitle>
                <CardDescription>
                    {totalItems} Item | Total: {formatRupiah(totalPrice)}
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4 flex-1 overflow-y-auto">
                {cartItems.length > 0 ? (
                    <div className="space-y-3">
                        {cartItems.map(item => (
                            <div key={item.id} className="flex justify-between items-start text-sm">
                                <div>
                                    <p className="font-medium">{item.name} <span className="text-muted-foreground">x{item.quantity}</span></p>
                                    <p className="text-xs text-muted-foreground -mt-1">{item.budgetName}</p>
                                    <p className="text-muted-foreground">{formatRupiah(item.price * item.quantity)}</p>
                                    {item.brief && Object.values(item.brief).some(v => v) && (
                                        <div className="text-xs text-muted-foreground pl-4 border-l-2 ml-2 mt-2 space-y-1 py-1">
                                            {Object.entries(item.brief).filter(([, answer]) => answer).map(([question, answer]) => (
                                                <div key={question}>
                                                    <p className="font-medium text-foreground/70">{question}</p>
                                                    <p className="whitespace-pre-wrap">{answer as string}</p>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                </div>
                                <Button variant="ghost" size="icon" className="h-7 w-7 shrink-0" onClick={() => removeItem(item.id)}>
                                    <Trash2 className="h-4 w-4 text-destructive" />
                                </Button>
                            </div>
                        ))}
                    </div>
                ) : (
                    <p className="text-muted-foreground text-center py-8">Keranjang Anda kosong.</p>
                )}
                
                <Separator />
                
                <div className="space-y-4">
                    <h4 className="text-sm font-medium text-foreground">Data Pemesan</h4>
                     <Form {...form}>
                        <form className="space-y-3">
                            <FormField
                                control={form.control}
                                name="name"
                                render={({ field }) => (
                                <FormItem>
                                    <FormLabel className="sr-only">Nama Lengkap</FormLabel>
                                    <FormControl>
                                    <div className="relative">
                                        <User className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                                        <Input placeholder="Nama Lengkap Anda" {...field} className="pl-10" />
                                    </div>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="phone"
                                render={({ field }) => (
                                <FormItem>
                                     <FormLabel className="sr-only">Nomor Telepon</FormLabel>
                                    <FormControl>
                                    <div className="relative">
                                        <Phone className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                                        <Input placeholder="Nomor Telepon (Aktif)" {...field} className="pl-10" />
                                    </div>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="telegram"
                                render={({ field }) => (
                                <FormItem>
                                    <FormLabel className="sr-only">Username Telegram</FormLabel>
                                    <FormControl>
                                    <div className="relative">
                                        <Send className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                                        <Input placeholder="Username Telegram (@anda)" {...field} className="pl-10" />
                                    </div>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                                )}
                            />
                        </form>
                    </Form>
                </div>
                
                <Separator />

                <div className="space-y-2">
                    <h4 className="text-sm font-medium text-foreground">Pilih Metode Pembayaran</h4>
                     <div className="grid grid-cols-2 gap-4">
                          <div
                              onClick={() => setPaymentMethod('dp')}
                              className={`flex h-full flex-col items-center justify-center rounded-lg border-2 p-4 cursor-pointer transition-all space-y-1 text-center ${paymentMethod === 'dp' ? 'border-primary bg-primary/5' : 'border-muted bg-popover hover:bg-accent/50'}`}
                          >
                              <Percent className="h-6 w-6 text-primary" />
                              <h3 className="font-semibold text-base">DP 50%</h3>
                              <p className="text-muted-foreground text-xs">Bayar setengahnya sekarang.</p>
                          </div>
                          <div
                              onClick={() => setPaymentMethod('lunas')}
                              className={`flex h-full flex-col items-center justify-center rounded-lg border-2 p-4 cursor-pointer transition-all space-y-1 text-center ${paymentMethod === 'lunas' ? 'border-primary bg-primary/5' : 'border-muted bg-popover hover:bg-accent/50'}`}
                          >
                              <CheckCircle className="h-6 w-6 text-primary" />
                              <h3 className="font-semibold text-base">Lunas</h3>
                              <p className="text-muted-foreground text-xs">Dapatkan prioritas pengerjaan.</p>
                          </div>
                      </div>
                </div>

                <Separator />

                <div className="space-y-2">
                    <Label htmlFor="coupon-code" className="text-sm font-medium">Punya Kode Kupon?</Label>
                    <div className="flex space-x-2">
                        <Input id="coupon-code" placeholder="Masukkan kode kupon" />
                        <Button variant="secondary" className="shrink-0">Terapkan</Button>
                    </div>
                </div>

                <Separator />

                {paymentMethod ? (
                    <div className="space-y-1 text-lg">
                        <div className="flex justify-between">
                            <span>Total Bayar:</span>
                            <span className="font-bold">{formatRupiah(finalPrice)}</span>
                        </div>
                        {paymentMethod === 'dp' && <p className="text-xs text-muted-foreground text-right">Sisa pelunasan: {formatRupiah(totalPrice / 2)}</p>}
                    </div>
                ) : (
                    <p className="text-muted-foreground text-center py-4 text-sm">Pilih metode pembayaran untuk melihat total.</p>
                )}

            </CardContent>
            <CardFooter className="border-t pt-6">
                <Button className="w-full" onClick={handleSubmitOrder} disabled={isSubmitting || totalItems === 0 || !paymentMethod}>
                    {isSubmitting ? 'Mengirim...' : 'Kirim Pesanan'}
                </Button>
            </CardFooter>
        </Card>
    );
}
---
--- FILE: src/components/PortfolioSection.tsx ---
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { ArrowRight } from 'lucide-react';

export function PortfolioSection() {
    return (
        <section className="py-12 md:py-16 bg-background">
            <div className="container mx-auto text-center">
                <h2 className="text-3xl font-bold font-headline tracking-tight sm:text-4xl">Desain Cepat, Hasil Hebat.</h2>
                <p className="mt-4 max-w-2xl mx-auto text-lg text-muted-foreground">
                    Kami adalah solusi untuk semua kebutuhan desain grafis Anda yang mendesak. Dari konten media sosial hingga materi promosi, kami siap membantu brand Anda tampil profesional tanpa menunggu lama.
                </p>
                <div className="mt-8">
                    <Button asChild size="lg">
                        <Link href="/portfolio">
                            Lihat Portofolio Kami <ArrowRight className="ml-2 h-5 w-5" />
                        </Link>
                    </Button>
                </div>
            </div>
        </section>
    );
}
---
--- FILE: src/components/ProductCarousel.tsx ---
'use client';

import React, { useRef, useState, useEffect, useCallback } from 'react';
import { ServiceCard } from './ServiceCard';
import type { Service } from '@/lib/types';
import { Button } from './ui/button';
import { ChevronLeft, ChevronRight, LayoutPanelLeft, Briefcase, Megaphone, MonitorSmartphone } from 'lucide-react';
import Link from 'next/link';
import { cn } from '@/lib/utils';

interface ProductCarouselProps {
  title: string;
  services: Service[];
  categoryId: string;
}

const categoryIcons: Record<string, React.ElementType> = {
  'Konten Media Sosial': LayoutPanelLeft,
  'Branding & Kantor': Briefcase,
  'Materi Promosi': Megaphone,
  'Desain Digital & Event': MonitorSmartphone,
};


export function ProductCarousel({ title, services, categoryId }: ProductCarouselProps) {
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const [showLeftArrow, setShowLeftArrow] = useState(false);
  const [showRightArrow, setShowRightArrow] = useState(false);
  const Icon = categoryIcons[title];

  const updateArrowVisibility = useCallback(() => {
    const container = scrollContainerRef.current;
    if (!container) return;

    const { scrollLeft, scrollWidth, clientWidth } = container;
    const tolerance = 1;

    setShowLeftArrow(scrollLeft > tolerance);
    setShowRightArrow(scrollLeft < scrollWidth - clientWidth - tolerance);
  }, []);

  useEffect(() => {
    const container = scrollContainerRef.current;
    if (!container) return;
    
    const resizeObserver = new ResizeObserver(updateArrowVisibility);
    resizeObserver.observe(container);
    container.addEventListener('scroll', updateArrowVisibility, { passive: true });

    updateArrowVisibility();

    return () => {
      resizeObserver.disconnect();
      if (container) {
        container.removeEventListener('scroll', updateArrowVisibility);
      }
    };
  }, [services, updateArrowVisibility]);

  const scroll = (direction: 'left' | 'right') => {
    if (scrollContainerRef.current) {
      const container = scrollContainerRef.current;
      const item = container.querySelector('.carousel-item');
      if (!item) return;
      const itemWidth = item.clientWidth;
      const gap = 16;
      const scrollAmount = (itemWidth + gap) * (direction === 'left' ? -1 : 1);
      
      container.scrollBy({ 
        left: scrollAmount, 
        behavior: 'smooth' 
      });
    }
  };

  return (
    <div className="mb-12">
      <div className="relative">
        <div className="flex justify-between items-center mb-6 px-4 md:px-0">
          <h3 className="text-2xl font-headline font-bold flex items-center gap-3">
            {Icon && <Icon className="h-7 w-7 text-primary" />}
            {title}
          </h3>
          <Link href={`/catalog/${categoryId}`} className="text-green-600 font-semibold text-sm hover:underline shrink-0 ml-4">
              Lihat Semua
          </Link>
        </div>
        
        <div
          ref={scrollContainerRef}
          className="flex gap-4 overflow-x-auto no-scrollbar scroll-smooth pb-4 px-4 md:px-0"
        >
          {services.map((service) => (
            <div 
              key={service.id} 
              className="carousel-item w-3/5 sm:w-[calc(50%-0.5rem)] md:w-[calc(33.333%-0.75rem)] shrink-0"
            >
              <ServiceCard service={service} />
            </div>
          ))}
        </div>

        {showLeftArrow && (
          <Button
            variant="outline"
            size="icon"
            className="absolute top-1/2 -translate-y-1/2 left-2 rounded-full h-10 w-10 z-10 hidden md:flex transition-opacity bg-background/80 hover:bg-background shadow-md"
            onClick={() => scroll('left')}
          >
            <ChevronLeft className="h-6 w-6" />
            <span className="sr-only">Scroll Left</span>
          </Button>
        )}

        {showRightArrow && (
          <Button
            variant="outline"
            size="icon"
            className="absolute top-1/2 -translate-y-1/2 right-2 rounded-full h-10 w-10 z-10 hidden md:flex transition-opacity bg-background/80 hover:bg-background shadow-md"
            onClick={() => scroll('right')}
          >
            <ChevronRight className="h-6 w-6" />
            <span className="sr-only">Scroll Right</span>
          </Button>
        )}
      </div>
    </div>
  );
}
---
--- FILE: src/components/ProductDetailDialog.tsx ---
'use client';

import { useState, useEffect, useMemo } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { QuantityStepper } from '@/components/QuantityStepper';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useCart } from '@/contexts/CartContext';
import type { Service, BudgetTier } from '@/lib/types';
import { budgetItems } from '@/lib/data';
import { formatRupiah, cn } from '@/lib/utils';
import { useToast } from "@/hooks/use-toast";
import { Ticket, CheckCircle } from 'lucide-react';
import { Separator } from './ui/separator';

interface ProductDetailDialogProps {
  service: Service;
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}

const fallbackBriefFields = [
    { name: 'Mau desain seperti apa?', placeholder: 'Jelaskan konsep atau gaya desain yang Anda inginkan...', type: 'textarea' as const },
    { name: 'Link Aset Tambahan (wajib Google Drive)', placeholder: 'https://drive.google.com/...', type: 'input' as const },
];

export function ProductDetailDialog({ service, isOpen, onOpenChange }: ProductDetailDialogProps) {
  const { addOrUpdateItem, getCartItem } = useCart();
  const { toast } = useToast();
  const router = useRouter();

  const [quantity, setQuantity] = useState(1);
  const [brief, setBrief] = useState<Record<string, string>>({});
  const [selectedTier, setSelectedTier] = useState<BudgetTier | null>(null);
  const [selectedImage, setSelectedImage] = useState(service.image);
  
  const [size, setSize] = useState({ width: '', height: '', unit: 'px' });

  const promo = useMemo(() => {
    if (service.id === 'desain-konten-carousel' && selectedTier) {
      const originalPrice = service.prices[selectedTier];
      return {
        active: true,
        discountPrice: originalPrice * 0.8, // 20% off
        originalPrice: originalPrice,
        hemat: originalPrice * 0.2,
      };
    }
    return { active: false, discountPrice: 0, originalPrice: 0, hemat: 0 };
  }, [service, selectedTier]);

  useEffect(() => {
    if (isOpen) {
      const cartItem = getCartItem(service.id);
      const initialQuantity = cartItem?.quantity || 1;
      const initialBrief = cartItem?.brief || {};
      const initialTier = cartItem?.budgetTier || null;
      
      setQuantity(initialQuantity);
      setBrief(initialBrief);
      setSelectedTier(initialTier);
      
      if (initialTier && service.tierImages[initialTier]) {
        setSelectedImage(service.tierImages[initialTier]);
      } else {
        setSelectedImage(service.image);
      }
      
      const savedSize = initialBrief['Ukuran'] ? initialBrief['Ukuran'].match(/(\d+)\s*x\s*(\d+)\s*(\w+)/) : null;
      if (savedSize) {
        setSize({ width: savedSize[1], height: savedSize[2], unit: savedSize[3] });
      } else {
        setSize({ width: '', height: '', unit: 'px' });
      }

    } else {
      setTimeout(() => {
        setQuantity(1);
        setBrief({});
        setSelectedTier(null);
        setSelectedImage(service.image);
        setSize({ width: '', height: '', unit: 'px' });
      }, 300);
    }
  }, [isOpen, service, getCartItem]);
  
  useEffect(() => {
      if (selectedTier && service.tierImages[selectedTier]) {
          setSelectedImage(service.tierImages[selectedTier]);
      } else {
        setSelectedImage(service.image);
      }
  }, [selectedTier, service.tierImages, service.image]);

  const handleBriefChange = (field: string, value: string) => {
    setBrief(prev => ({ ...prev, [field]: value }));
  };

  const handleSave = () => {
    if (!selectedTier) {
      toast({
        title: "Pilih Varian Dulu",
        description: "Anda harus memilih salah satu varian budget sebelum melanjutkan.",
        variant: "destructive",
      });
      return false;
    }

    const fullBrief = { ...brief };
    if (size.width && size.height) {
      fullBrief['Ukuran'] = `${size.width} x ${size.height} ${size.unit}`;
    }

    addOrUpdateItem(service, quantity, fullBrief, selectedTier);
    onOpenChange(false);
    return true;
  };
  
  const handleCheckout = () => {
    const success = handleSave();
    if (success) {
        router.push('/#summary-section'); 
    }
  }

  const currentPrice = useMemo(() => {
    if (!selectedTier) return 0;
    return promo.active ? promo.discountPrice : service.prices[selectedTier];
  }, [selectedTier, promo, service.prices]);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="p-0 sm:max-w-4xl max-h-[90vh] flex flex-col">
        <div className="flex-1 flex flex-col sm:grid sm:grid-cols-2 sm:gap-6 sm:items-start overflow-y-auto">
          
          {/* Image Column */}
          <div className="p-0 sm:p-6 sm:sticky sm:top-0">
              <div className="relative aspect-square w-full overflow-hidden sm:rounded-lg block">
                  <Image 
                      key={selectedImage}
                      src={selectedImage} 
                      alt={service.name} 
                      fill 
                      className="object-cover animate-in fade-in"
                  />
              </div>
          </div>

          {/* Content Column */}
          <div className="flex-1 flex flex-col">
              <div className="p-4 sm:p-6 sm:pt-6 sm:pr-4 flex-1 overflow-y-auto">
                  <div className="space-y-5">
                  
                      {/* Mobile Header */}
                      <div className="flex items-start gap-3 sm:hidden">
                          <div className="w-16 h-16 relative overflow-hidden rounded-md shrink-0">
                              <Image src={selectedImage} alt={service.name} fill className="object-cover" />
                          </div>
                          <div>
                              <DialogTitle asChild>
                                <h2 className="font-semibold tracking-tight font-headline text-base text-left leading-tight">
                                  {service.name}
                                </h2>
                              </DialogTitle>
                              {promo.active && selectedTier ? (
                                  <div className="flex items-center gap-2 flex-wrap">
                                      <p className="text-xl font-bold text-red-600">{formatRupiah(currentPrice * quantity)}</p>
                                      <p className="text-base font-medium text-muted-foreground line-through">{formatRupiah(promo.originalPrice * quantity)}</p>
                                  </div>
                              ) : (
                                  <p className="text-xl font-bold text-green-600">
                                      {selectedTier ? formatRupiah(currentPrice * quantity) : 'Pilih varian'}
                                  </p>
                              )}
                          </div>
                      </div>

                      {/* Desktop Header */}
                      <div className="hidden sm:block space-y-2">
                          <DialogTitle className="font-headline text-2xl tracking-tight text-left">{service.name}</DialogTitle>
                          <div className="space-y-1">
                          {promo.active && selectedTier ? (
                              <div className="flex flex-col items-start">
                                  <div className="flex items-center gap-2 flex-wrap">
                                      <p className="text-3xl font-bold text-red-600">{formatRupiah(currentPrice * quantity)}</p>
                                      <p className="text-lg font-medium text-muted-foreground line-through">{formatRupiah(promo.originalPrice * quantity)}</p>
                                  </div>
                                  <div className="mt-1 flex items-center gap-2 rounded-md border border-red-500/50 bg-red-500/10 px-2 py-1 text-sm text-red-600">
                                      <Ticket className="h-4 w-4"/>
                                      <span>Hemat {formatRupiah(promo.hemat * quantity)}!</span>
                                  </div>
                              </div>
                          ) : (
                              <p className="text-3xl font-bold text-green-600">
                                  {selectedTier ? formatRupiah(currentPrice * quantity) : 'Pilih varian'}
                              </p>
                          )}
                          </div>
                      </div>
                      
                      <Separator/>

                      <div className="space-y-2">
                      <Label className="font-semibold text-sm">Variasi</Label>
                      <div className="grid grid-cols-3 gap-2">
                          {budgetItems.map((budget) => (
                              <button
                              key={budget.id}
                              onClick={() => setSelectedTier(budget.id)}
                              className={cn(
                                  "w-full text-left p-2 border-2 rounded-lg transition-colors relative",
                                  "flex items-center gap-2",
                                  selectedTier === budget.id ? 'border-primary bg-primary/5' : 'border-muted bg-popover hover:bg-accent/50'
                              )}
                              >
                              {selectedTier === budget.id && (
                                  <div className="absolute top-1 right-1 bg-green-500 text-white rounded-full p-0.5">
                                      <CheckCircle className="h-3 w-3" />
                                  </div>
                              )}
                              <Image src={budget.image} alt={budget.title} width={24} height={24} className="rounded-md shrink-0" data-ai-hint="logo" />
                              <div>
                                  <p className="font-semibold text-xs leading-tight">{budget.title}</p>
                              </div>
                              </button>
                          ))}
                      </div>
                      </div>

                      <Separator />
                      
                      {fallbackBriefFields.map(field => (
                      <div key={field.name} className="w-full space-y-2">
                          <Label htmlFor={`brief-${service.id}-${field.name}`} className="font-semibold text-sm">{field.name}</Label>
                          {field.type === 'textarea' ? (
                              <Textarea
                                  id={`brief-${service.id}-${field.name}`}
                                  placeholder={field.placeholder}
                                  maxLength={500}
                                  value={brief[field.name] ?? ''}
                                  onChange={(e) => handleBriefChange(field.name, e.target.value)}
                                  className="text-sm"
                              />
                          ) : (
                              <Input
                                  id={`brief-${service.id}-${field.name}`}
                                  placeholder={field.placeholder}
                                  value={brief[field.name] ?? ''}
                                  onChange={(e) => handleBriefChange(field.name, e.target.value)}
                                  className="text-sm"
                              />
                          )}
                      </div>
                      ))}

                      <Separator />

                      <div className="space-y-3">
                          <div className="flex justify-between items-center">
                              <Label htmlFor="width" className="font-semibold text-sm">Ukuran</Label>
                              <div className="flex items-center gap-1">
                              <Input
                                  id='width'
                                  placeholder="L"
                                  className="h-9 text-center"
                                  value={size.width}
                                  onChange={(e) => setSize(s => ({...s, width: e.target.value}))}
                                  style={{width: `${(size.width.length || 1) + 2}ch`, minWidth: '3rem'}}
                              />
                              <span className="text-muted-foreground">x</span>
                              <Input
                                  id='height'
                                  placeholder="T"
                                  className="h-9 text-center"
                                  value={size.height}
                                  onChange={(e) => setSize(s => ({...s, height: e.target.value}))}
                                  style={{width: `${(size.height.length || 1) + 2}ch`, minWidth: '3rem'}}
                              />
                              <Select value={size.unit} onValueChange={(value) => setSize(s => ({...s, unit: value as 'px' | 'cm' | 'm'}))}>
                                  <SelectTrigger className="w-[70px] h-9">
                                      <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                      <SelectItem value="px">px</SelectItem>
                                      <SelectItem value="cm">cm</SelectItem>
                                      <SelectItem value="m">m</SelectItem>
                                  </SelectContent>
                              </Select>
                              </div>
                          </div>
                          <div className="flex justify-between items-center">
                              <Label className="font-semibold text-sm">Jumlah</Label>
                              <QuantityStepper quantity={quantity} onQuantityChange={setQuantity} />
                          </div>
                      </div>
                  </div>
              </div>
              <DialogFooter className="p-4 border-t bg-background grid grid-cols-2 gap-4 shrink-0 sm:flex sm:items-center sm:justify-end sm:gap-2">
                  <Button type="button" onClick={handleSave} variant="outline" className="w-full sm:w-auto">
                      {getCartItem(service.id) ? 'Simpan Perubahan' : 'Tambah Desain'}
                  </Button>
                  <Button type="button" onClick={handleCheckout} className="w-full sm:w-auto">
                      Lanjut Bayar
                  </Button>
              </DialogFooter>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
---
--- FILE: src/components/ProductFormDialog.tsx ---
'use client';

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { useToast } from "@/hooks/use-toast"
import type { Service } from "@/lib/types"
import { useEffect } from "react"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { mockCategories } from "@/lib/data";
import { Separator } from "./ui/separator";

const productFormSchema = z.object({
  id: z.string(),
  name: z.string().min(3, { message: "Nama produk minimal 3 karakter." }),
  category: z.string({ required_error: "Silakan pilih kategori." }),
  prices: z.object({
    'kaki-lima': z.coerce.number().min(0, { message: "Harga harus angka positif." }),
    'umkm': z.coerce.number().min(0, { message: "Harga harus angka positif." }),
    'e-comm': z.coerce.number().min(0, { message: "Harga harus angka positif." }),
  }),
  image: z.string().url({ message: "URL gambar tidak valid." }),
  tierImages: z.object({
    'kaki-lima': z.string().url({ message: "URL gambar tidak valid." }),
    'umkm': z.string().url({ message: "URL gambar tidak valid." }),
    'e-comm': z.string().url({ message: "URL gambar tidak valid." }),
  }),
  dataAiHint: z.string().min(2, { message: "Petunjuk AI minimal 2 karakter." }),
})

type ProductFormValues = z.infer<typeof productFormSchema>

interface ProductFormDialogProps {
  product: Service | null
  isOpen: boolean
  onOpenChange: (isOpen: boolean) => void
}

const defaultTierImages = {
    'kaki-lima': "https://placehold.co/128x128/f8fafc/64748b.png",
    'umkm': "https://placehold.co/128x128/f1f5f9/334155.png",
    'e-comm': "https://placehold.co/128x128/e2e8f0/1e293b.png",
};

export function ProductFormDialog({ product, isOpen, onOpenChange }: ProductFormDialogProps) {
  const { toast } = useToast()

  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productFormSchema),
    defaultValues: {
      id: product?.id || `new-product-${Date.now()}`,
      name: product?.name || "",
      category: product?.category || undefined,
      prices: {
        'kaki-lima': product?.prices['kaki-lima'] || 0,
        'umkm': product?.prices['umkm'] || 0,
        'e-comm': product?.prices['e-comm'] || 0,
      },
      image: product?.image || "https://placehold.co/400x300.png",
      tierImages: product?.tierImages || defaultTierImages,
      dataAiHint: product?.dataAiHint || "",
    },
  })

  useEffect(() => {
    if (isOpen) {
      form.reset({
        id: product?.id || `new-product-${Date.now()}`,
        name: product?.name || "",
        category: product?.category || undefined,
        prices: {
          'kaki-lima': product?.prices['kaki-lima'] || 0,
          'umkm': product?.prices['umkm'] || 0,
          'e-comm': product?.prices['e-comm'] || 0,
        },
        image: product?.image || "https://placehold.co/400x300.png",
        tierImages: product?.tierImages || defaultTierImages,
        dataAiHint: product?.dataAiHint || "",
      })
    }
  }, [isOpen, product, form])


  function onSubmit(data: ProductFormValues) {
    // In a real app, you'd send this data to your database/API
    console.log("Product data submitted:", data);
    
    toast({
      title: `Produk ${product ? 'Diperbarui' : 'Dibuat'}!`,
      description: `(Simulasi) Produk "${data.name}" telah disimpan.`,
    })

    onOpenChange(false);
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>{product ? 'Edit Produk' : 'Tambah Produk Baru'}</DialogTitle>
          <DialogDescription>
            Isi detail produk di bawah ini. Perubahan belum akan tersimpan permanen.
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 max-h-[70vh] overflow-y-auto pr-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nama Produk</FormLabel>
                  <FormControl>
                    <Input placeholder="Contoh: Desain Logo Premium" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="category"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Kategori</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Pilih kategori untuk produk" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {mockCategories.map((category) => (
                        <SelectItem key={category.id} value={category.id}>
                          {category.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <FormField
                control={form.control}
                name="prices.kaki-lima"
                render={({ field }) => (
                    <FormItem>
                    <FormLabel>Harga Kaki Lima</FormLabel>
                    <FormControl>
                        <Input type="number" placeholder="15000" {...field} />
                    </FormControl>
                    <FormMessage />
                    </FormItem>
                )}
                />
                <FormField
                control={form.control}
                name="prices.umkm"
                render={({ field }) => (
                    <FormItem>
                    <FormLabel>Harga UMKM</FormLabel>
                    <FormControl>
                        <Input type="number" placeholder="25000" {...field} />
                    </FormControl>
                    <FormMessage />
                    </FormItem>
                )}
                />
                <FormField
                control={form.control}
                name="prices.e-comm"
                render={({ field }) => (
                    <FormItem>
                    <FormLabel>Harga E-Comm</FormLabel>
                    <FormControl>
                        <Input type="number" placeholder="70000" {...field} />
                    </FormControl>
                    <FormMessage />
                    </FormItem>
                )}
                />
            </div>
            
            <Separator />
            <p className="text-sm font-medium">Gambar</p>

            <FormField
              control={form.control}
              name="image"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>URL Gambar Utama (di kartu produk)</FormLabel>
                  <FormControl>
                    <Input placeholder="https://placehold.co/400x300" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
             <FormField
              control={form.control}
              name="dataAiHint"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Petunjuk Gambar AI</FormLabel>
                  <FormControl>
                    <Input placeholder="Contoh: logo design" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <Separator />
            <p className="text-sm font-medium">Gambar Tier (di popup)</p>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                 <FormField
                    control={form.control}
                    name="tierImages.kaki-lima"
                    render={({ field }) => (
                        <FormItem>
                        <FormLabel>Tier Kaki Lima</FormLabel>
                        <FormControl>
                            <Input placeholder="https://..." {...field} />
                        </FormControl>
                        <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="tierImages.umkm"
                    render={({ field }) => (
                        <FormItem>
                        <FormLabel>Tier UMKM</FormLabel>
                        <FormControl>
                            <Input placeholder="https://..." {...field} />
                        </FormControl>
                        <FormMessage />
                        </FormItem>
                    )}
                />
                <FormField
                    control={form.control}
                    name="tierImages.e-comm"
                    render={({ field }) => (
                        <FormItem>
                        <FormLabel>Tier E-Comm</FormLabel>
                        <FormControl>
                            <Input placeholder="https://..." {...field} />
                        </FormControl>
                        <FormMessage />
                        </FormItem>
                    )}
                />
            </div>

            <DialogFooter className="pt-4 sticky bottom-0 bg-background py-4">
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                Batal
              </Button>
              <Button type="submit">Simpan Perubahan</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}
---
--- FILE: src/components/PromotionalBannerCarousel.tsx ---
'use client';

import * as React from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { Card, CardContent } from "@/components/ui/card";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { mockBanners } from '@/lib/data';
import Autoplay from "embla-carousel-autoplay";

export function PromotionalBannerCarousel() {
  const activeBanners = mockBanners.filter(banner => banner.status === 'Aktif' && banner.type === 'Image');

  if (activeBanners.length === 0) {
    return null;
  }

  return (
    <section className="w-full py-8 md:py-12">
      <div className="container mx-auto px-4">
        <Carousel
            plugins={[
                Autoplay({
                    delay: 5000,
                    stopOnInteraction: true,
                }),
            ]}
            className="w-full"
            opts={{
            loop: true,
            }}
        >
            <CarouselContent>
            {activeBanners.map((banner, index) => (
                <CarouselItem key={banner.id}>
                <Link href={banner.href || '#'}>
                    <Card className="overflow-hidden border-0 shadow-lg rounded-xl">
                    <CardContent className="flex aspect-[3/1] items-center justify-center p-0">
                        {banner.image && (
                            <Image
                                src={banner.image}
                                alt={banner.name}
                                width={600}
                                height={200}
                                className="object-cover w-full h-full"
                                data-ai-hint={banner.dataAiHint}
                                priority={index === 0}
                            />
                        )}
                    </CardContent>
                    </Card>
                </Link>
                </CarouselItem>
            ))}
            </CarouselContent>
            <CarouselPrevious className="hidden sm:flex left-[-1rem]" />
            <CarouselNext className="hidden sm:flex right-[-1rem]" />
        </Carousel>
      </div>
    </section>
  );
}
---
--- FILE: src/components/QuantityStepper.tsx ---
"use client"
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Minus, Plus } from "lucide-react";

interface QuantityStepperProps {
    quantity: number;
    onQuantityChange: (newQuantity: number) => void;
    disabled?: boolean;
}

export function QuantityStepper({ quantity, onQuantityChange, disabled = false }: QuantityStepperProps) {
    const handleIncrement = () => onQuantityChange(quantity + 1);
    const handleDecrement = () => onQuantityChange(Math.max(0, quantity - 1));

    return (
        <div className="flex items-center gap-2">
            <Button variant="outline" size="icon" className="shrink-0" onClick={handleDecrement} disabled={disabled || quantity <= 0}>
                <Minus className="h-4 w-4" />
                <span className="sr-only">Kurangi jumlah</span>
            </Button>
            <Input
                type="text"
                readOnly
                value={quantity}
                className="w-12 h-10 text-center"
                disabled={disabled}
            />
            <Button variant="outline" size="icon" className="shrink-0" onClick={handleIncrement} disabled={disabled}>
                <Plus className="h-4 w-4" />
                <span className="sr-only">Tambah jumlah</span>
            </Button>
        </div>
    );
}
---
--- FILE: src/components/ServiceCard.tsx ---
"use client";

import Image from 'next/image';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useCart } from '@/contexts/CartContext';
import type { Service } from '@/lib/types';
import { useState } from 'react';
import { ProductDetailDialog } from './ProductDetailDialog';
import { Dialog, DialogContent, DialogTitle } from '@/components/ui/dialog';
import { PlusCircle } from 'lucide-react';
import { formatRupiah } from '@/lib/utils';

interface ServiceCardProps {
  service: Service;
}

export function ServiceCard({ service }: ServiceCardProps) {
  const { getCartItem } = useCart();
  const cartItem = getCartItem(service.id);
  const quantity = cartItem?.quantity ?? 0;
  
  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);
  const [isImagePreviewOpen, setIsImagePreviewOpen] = useState(false);

  const prices = Object.values(service.prices);
  const minPrice = Math.min(...prices);
  const maxPrice = Math.max(...prices);

  return (
    <>
      <Card className="flex flex-col h-full overflow-hidden">
        <CardHeader className="p-0">
          <div
            className="relative w-full cursor-pointer overflow-hidden aspect-[4/3]"
            onClick={() => setIsImagePreviewOpen(true)}
            role="button"
            aria-label={`Lihat gambar untuk ${service.name}`}
          >
            <Image
              src={service.image}
              alt={service.name}
              fill
              className="object-cover"
              data-ai-hint={service.dataAiHint}
            />
          </div>
        </CardHeader>

        <CardContent className="p-4 flex-grow space-y-1">
          <CardTitle className="font-headline text-lg">{service.name}</CardTitle>
          <p className="font-semibold text-primary/80 text-sm">
            {formatRupiah(minPrice)} - {formatRupiah(maxPrice)}
          </p>
        </CardContent>

        <CardFooter className="p-4 pt-0">
          <Button 
            className="w-full" 
            variant={quantity > 0 ? "secondary" : "default"}
            onClick={() => setIsDetailDialogOpen(true)}
          >
            {quantity > 0 ? (
              <div className='flex items-center justify-center'>
                <Badge className="mr-2">{quantity}</Badge> Ubah Detail
              </div>
            ) : (
              <>
                <PlusCircle className="mr-2 h-4 w-4" />
                Tambahkan
              </>
            )}
          </Button>
        </CardFooter>
      </Card>
      
      {/* This is the dialog for configuring the product */}
      <ProductDetailDialog 
        isOpen={isDetailDialogOpen}
        onOpenChange={setIsDetailDialogOpen}
        service={service}
      />

      {/* This is the new dialog for just previewing the image */}
      <Dialog open={isImagePreviewOpen} onOpenChange={setIsImagePreviewOpen}>
        <DialogContent className="max-w-3xl p-2">
            {/* Adding a title for accessibility */}
            <DialogTitle className="sr-only">Pratinjau Gambar: {service.name}</DialogTitle>
            <Image
                src={service.image}
                alt={service.name}
                width={1200}
                height={800}
                className="object-contain w-full h-full rounded-md"
            />
        </DialogContent>
      </Dialog>
    </>
  );
}
---
--- FILE: src/components/TrackOrderForm.tsx ---
'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Loader2, Search, PackageCheck, XCircle } from 'lucide-react';
import { mockOrders } from '@/lib/data';
import type { Order, OrderStatus } from '@/lib/types';
import { cn } from '@/lib/utils';

export function TrackOrderForm() {
  const [orderIdInput, setOrderIdInput] = useState('');
  const [foundOrder, setFoundOrder] = useState<Order | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleTrackOrder = (e: React.FormEvent) => {
    e.preventDefault();
    if (!orderIdInput) return;

    setIsLoading(true);
    setFoundOrder(null);
    setError(null);

    // Simulate API call
    setTimeout(() => {
      const order = mockOrders.find(o => o.kode_order.toLowerCase() === orderIdInput.toLowerCase());
      if (order) {
        setFoundOrder(order);
      } else {
        setError('Pesanan tidak ditemukan. Pastikan kode pesanan Anda benar (contoh: #001).');
      }
      setIsLoading(false);
    }, 1000);
  };

  const getStatusClass = (status: OrderStatus) => {
    switch (status) {
      case 'Masuk Antrian': return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
      case 'Sedang Dikerjakan': return 'bg-blue-500/20 text-blue-700 border-blue-500/30';
      case 'Siap Kirim Pratinjau': return 'bg-cyan-500/20 text-cyan-700 border-cyan-500/30';
      case 'Selesai': return 'bg-green-500/20 text-green-700 border-green-500/30';
      case 'Menunggu Pembayaran': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/30';
      case 'Menunggu Respon Klien': return 'bg-amber-500/20 text-amber-700 border-amber-500/30';
      case 'Dibatalkan (Belum Dikerjakan)': return 'bg-red-500/20 text-red-700 border-red-500/30';
      default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30';
    }
  };

  return (
    <div className="w-full max-w-md mx-auto space-y-8">
      <Card>
        <CardHeader className="text-center">
          <CardTitle className="font-headline text-2xl">Lacak Pesanan Anda</CardTitle>
          <CardDescription>Masukkan kode pesanan Anda untuk melihat status terbaru.</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleTrackOrder} className="flex gap-2">
            <Input
              type="text"
              placeholder="#001"
              value={orderIdInput}
              onChange={(e) => setOrderIdInput(e.target.value)}
              className="flex-grow"
            />
            <Button type="submit" disabled={isLoading}>
              {isLoading ? <Loader2 className="animate-spin" /> : <Search />}
              <span className="sr-only">Lacak</span>
            </Button>
          </form>
        </CardContent>
      </Card>

      {isLoading && (
        <div className="text-center text-muted-foreground flex items-center justify-center gap-2">
          <Loader2 className="animate-spin" />
          Mencari pesanan...
        </div>
      )}
      
      {error && (
        <Card className="border-destructive">
            <CardHeader className="flex flex-row items-center gap-4 space-y-0">
                <XCircle className="h-8 w-8 text-destructive" />
                <div>
                    <CardTitle className="text-destructive">Gagal Menemukan</CardTitle>
                    <CardDescription className="text-destructive/80">{error}</CardDescription>
                </div>
            </CardHeader>
        </Card>
      )}

      {foundOrder && (
        <Card>
            <CardHeader>
                <div className="flex justify-between items-start">
                    <div>
                        <CardTitle>Pesanan Ditemukan!</CardTitle>
                        <CardDescription>Kode: {foundOrder.kode_order}</CardDescription>
                    </div>
                    <PackageCheck className="h-8 w-8 text-green-500" />
                </div>
            </CardHeader>
            <CardContent className="space-y-4">
                <div>
                    <p className="text-sm text-muted-foreground">Pelanggan</p>
                    <p className="font-semibold">{foundOrder.nama_klien}</p>
                </div>
                <div>
                    <p className="text-sm text-muted-foreground">Status Saat Ini</p>
                    <Badge variant="outline" className={cn("capitalize text-base mt-1", getStatusClass(foundOrder.status_pesanan))}>
                        {foundOrder.status_pesanan}
                    </Badge>
                </div>
                <p className="text-xs text-center text-muted-foreground pt-4">
                    Untuk detail lebih lanjut, silakan periksa notifikasi di Telegram Anda.
                </p>
            </CardContent>
        </Card>
      )}
    </div>
  );
}
---
--- FILE: src/components/ui/accordion.tsx ---
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
---
--- FILE: src/components/ui/alert-dialog.tsx ---
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
---
--- FILE: src/components/ui/alert.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
---
--- FILE: src/components/ui/avatar.tsx ---
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
---
--- FILE: src/components/ui/badge.tsx ---
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
---
--- FILE: src/components/ui/button.tsx ---
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
---
--- FILE: src/components/ui/calendar.tsx ---
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
---
--- FILE: src/components/ui/card.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
---
--- FILE: src/components/ui/carousel.tsx ---
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { ArrowLeft, ArrowRight } from "lucide-react"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
  useCarousel,
}
---
--- FILE: src/components/ui/chart.tsx ---
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
---
--- FILE: src/components/ui/checkbox.tsx ---
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
---
--- FILE: src/components/ui/dialog.tsx ---
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
---
--- FILE: src/contexts/CartContext.tsx ---
"use client";

import React, { createContext, useContext, useState, ReactNode, useCallback } from 'react';
import type { CartItem, Service, BudgetTier } from '@/lib/types';
import { budgetItems } from '@/lib/data';

interface CartContextType {
  cartItems: CartItem[];
  addOrUpdateItem: (service: Service, quantity: number, brief: Record<string, string>, budgetTier: BudgetTier) => void;
  removeItem: (serviceId: string) => void;
  clearCart: () => void;
  totalPrice: number;
  totalItems: number;
  paymentMethod: 'dp' | 'lunas' | null;
  setPaymentMethod: (method: 'dp' | 'lunas' | null) => void;
  getCartItem: (serviceId: string) => CartItem | undefined;
  cartShake: number;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [paymentMethod, setPaymentMethod] = useState<'dp' | 'lunas' | null>(null);
  const [cartShake, setCartShake] = useState(0);

  const getCartItem = useCallback((serviceId: string) => {
    return cartItems.find(item => item.id === serviceId);
  }, [cartItems]);

  const addOrUpdateItem = useCallback((service: Service, quantity: number, brief: Record<string, string>, budgetTier: BudgetTier) => {
    const budgetName = budgetItems.find(b => b.id === budgetTier)?.title || 'Custom';
    
    setCartItems(prevItems => {
      if (quantity <= 0) {
        return prevItems.filter(item => item.id !== service.id);
      }

      const existingItemIndex = prevItems.findIndex(item => item.id === service.id);
      
      const newItemData: CartItem = {
        id: service.id,
        name: service.name,
        quantity,
        price: service.prices[budgetTier],
        brief,
        image: service.image,
        budgetTier: budgetTier,
        budgetName: budgetName,
      };

      if (existingItemIndex > -1) {
        const updatedItems = [...prevItems];
        updatedItems[existingItemIndex] = newItemData;
        return updatedItems;
      } else {
        return [...prevItems, newItemData];
      }
    });
    setCartShake(s => s + 1);
  }, []);

  const removeItem = useCallback((serviceId: string) => {
    setCartItems(prevItems => prevItems.filter(item => item.id !== serviceId));
    setCartShake(s => s + 1);
  }, []);

  const clearCart = () => {
    setCartItems([]);
    setCartShake(s => s + 1);
  };

  const totalPrice = cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
  const totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);

  return (
    <CartContext.Provider
      value={{
        cartItems,
        addOrUpdateItem,
        removeItem,
        clearCart,
        totalPrice,
        totalItems,
        paymentMethod,
        setPaymentMethod,
        getCartItem,
        cartShake,
      }}
    >
      {children}
    </CartContext.Provider>
  );
};

export const useCart = () => {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};
---
--- FILE: src/hooks/use-mobile.tsx ---
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
---
--- FILE: src/hooks/use-toast.ts ---
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
---
--- FILE: src/lib/data.ts ---
import type { BudgetItem, Service, Order, Promo, Coupon, Banner, AdminUser, DriveActivityLog, CalendarActivityLog, MeetActivityLog, Category, CustomerProfile, OrderStatus } from '@/lib/types';

export const budgetItems: BudgetItem[] = [
  {
    id: 'kaki-lima',
    title: 'Budget Kaki Lima',
    description: 'Buat yang baru mulai atau iseng-iseng. Sat-set, harga bestie.',
    image: 'https://placehold.co/40x40/f8fafc/64748b.png',
  },
  {
    id: 'umkm',
    title: 'Budget UMKM',
    description: 'Level up-in brand kamu. Biar makin pro dan dikenal luas.',
    image: 'https://placehold.co/40x40/f1f5f9/334155.png',
  },
  {
    id: 'e-comm',
    title: 'Budget E-Commerce',
    description: 'Paket all-in buat para suhu e-comm. Visual auto-gacor.',
    image: 'https://placehold.co/40x40/e2e8f0/1e293b.png',
  },
];

export const mockCategories: Category[] = [
  { id: 'konten-medsos', name: 'Konten Media Sosial' },
  { id: 'branding-kantor', name: 'Branding & Kantor' },
  { id: 'materi-promosi', name: 'Materi Promosi' },
  { id: 'desain-digital-event', name: 'Desain Digital & Event' },
];

export const services: Service[] = [
  // Kategori: Konten Media Sosial
  {
    id: 'desain-konten-feed',
    name: 'Desain Konten Feed (Single Post)',
    prices: { 'kaki-lima': 15000, 'umkm': 25000, 'e-comm': 70000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'konten-medsos',
    dataAiHint: 'social media',
  },
  {
    id: 'desain-konten-carousel',
    name: 'Desain Konten Carousel (3 Slide)',
    prices: { 'kaki-lima': 30000, 'umkm': 60000, 'e-comm': 180000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'konten-medsos',
    dataAiHint: 'social media',
  },
  {
    id: 'desain-konten-story',
    name: 'Desain Konten Story (Vertikal)',
    prices: { 'kaki-lima': 15000, 'umkm': 25000, 'e-comm': 70000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'konten-medsos',
    dataAiHint: 'instagram story',
  },
  {
    id: 'desain-frame-foto-profil',
    name: 'Desain Frame Foto Profil (Twibbon)',
    prices: { 'kaki-lima': 18000, 'umkm': 35000, 'e-comm': 80000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'konten-medsos',
    dataAiHint: 'profile frame',
  },
  // Kategori: Branding & Kantor
  {
    id: 'desain-kop-surat',
    name: 'Desain Kop Surat',
    prices: { 'kaki-lima': 15000, 'umkm': 28000, 'e-comm': 65000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'branding-kantor',
    dataAiHint: 'stationery branding',
  },
  {
    id: 'desain-kartu-nama',
    name: 'Desain Kartu Nama',
    prices: { 'kaki-lima': 18000, 'umkm': 30000, 'e-comm': 70000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'branding-kantor',
    dataAiHint: 'business card',
  },
  {
    id: 'desain-sertifikat',
    name: 'Desain Sertifikat / Piagam',
    prices: { 'kaki-lima': 20000, 'umkm': 45000, 'e-comm': 105000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'branding-kantor',
    dataAiHint: 'certificate design',
  },
  {
    id: 'desain-lanyard',
    name: 'Desain Lanyard / Tali ID Card',
    prices: { 'kaki-lima': 20000, 'umkm': 35000, 'e-comm': 85000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'branding-kantor',
    dataAiHint: 'lanyard design',
  },
  // Kategori: Materi Promosi
  {
    id: 'desain-poster-a4',
    name: 'Desain Poster (Ukuran A4)',
    prices: { 'kaki-lima': 22000, 'umkm': 50000, 'e-comm': 125000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'materi-promosi',
    dataAiHint: 'poster design',
  },
  {
    id: 'desain-buku-menu',
    name: 'Desain Buku Menu',
    prices: { 'kaki-lima': 25000, 'umkm': 60000, 'e-comm': 160000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'materi-promosi',
    dataAiHint: 'menu design',
  },
  {
    id: 'desain-undangan',
    name: 'Desain Undangan Digital / Cetak',
    prices: { 'kaki-lima': 25000, 'umkm': 60000, 'e-comm': 145000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'materi-promosi',
    dataAiHint: 'invitation design',
  },
  {
    id: 'desain-brosur',
    name: 'Desain Brosur / Pamflet Promosi',
    prices: { 'kaki-lima': 35000, 'umkm': 75000, 'e-comm': 195000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'materi-promosi',
    dataAiHint: 'brochure design',
  },
  {
    id: 'desain-x-banner',
    name: 'Desain X-Banner',
    prices: { 'kaki-lima': 35000, 'umkm': 75000, 'e-comm': 185000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'materi-promosi',
    dataAiHint: 'banner stand',
  },
  {
    id: 'desain-spanduk',
    name: 'Desain Spanduk / Banner Outdoor',
    prices: { 'kaki-lima': 40000, 'umkm': 85000, 'e-comm': 210000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'materi-promosi',
    dataAiHint: 'outdoor banner',
  },
  {
    id: 'desain-roll-up-banner',
    name: 'Desain Roll-Up Banner',
    prices: { 'kaki-lima': 45000, 'umkm': 90000, 'e-comm': 240000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'materi-promosi',
    dataAiHint: 'rollup banner',
  },
  // Kategori: Desain Digital & Event
  {
    id: 'desain-sampul-ebook',
    name: 'Desain Sampul E-book',
    prices: { 'kaki-lima': 35000, 'umkm': 70000, 'e-comm': 175000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'desain-digital-event',
    dataAiHint: 'ebook cover',
  },
  {
    id: 'desain-gate-acara',
    name: 'Desain Gerbang Acara (Gate)',
    prices: { 'kaki-lima': 70000, 'umkm': 150000, 'e-comm': 375000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'desain-digital-event',
    dataAiHint: 'event gate',
  },
  {
    id: 'desain-slide-presentasi',
    name: 'Desain Slide Presentasi (PPT)',
    prices: { 'kaki-lima': 70000, 'umkm': 150000, 'e-comm': 425000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'desain-digital-event',
    dataAiHint: 'presentation slide',
  },
  {
    id: 'desain-visual-landing-page',
    name: 'Desain Visual Landing Page',
    prices: { 'kaki-lima': 125000, 'umkm': 350000, 'e-comm': 950000 },
    tierImages: {
      'kaki-lima': 'https://placehold.co/128x128/f8fafc/64748b.png',
      'umkm': 'https://placehold.co/128x128/f1f5f9/334155.png',
      'e-comm': 'https://placehold.co/128x128/e2e8f0/1e293b.png',
    },
    image: 'https://placehold.co/400x300.png',
    category: 'desain-digital-event',
    dataAiHint: 'web page',
  },
];

export const allOrderStatusesCategorized: { label: string; statuses: OrderStatus[] }[] = [
    {
        label: 'Status Otomatis (Sistem)',
        statuses: [
            'Menunggu Pembayaran',
            'Masuk Antrian',
            'Masuk Antrian (Minggu Depan)',
            'Sedang Direvisi',
            'Menunggu Respon Klien',
            'Selesai',
            'Dibatalkan (Belum Dikerjakan)',
            'Dibatalkan (Sudah Dikerjakan)',
            'Tidak Puas (Refund 50%)',
            'Ditutup (Tanpa Refund)',
        ],
    },
    {
        label: 'Status Manual (Desainer)',
        statuses: [
            'Sedang Dikerjakan',
            'Siap Kirim Pratinjau',
            'Eskalasi: Revisi di Luar Lingkup',
        ],
    },
    {
        label: 'Status Intervensi (Owner)',
        statuses: ['Perlu Tinjauan Owner'],
    },
];

export const mockOrders: Order[] = [];

// Generate mock customer data from orders
const customerData = new Map<string, { id: string; name: string; email: string; telegram: string; totalOrders: number; ltv: number; lastOrderDate: string; avatar: string; }>();

mockOrders.forEach((order, index) => {
  const customerName = order.nama_klien;
  if (!customerData.has(customerName)) {
    customerData.set(customerName, {
      id: `cust-${index + 1}`,
      name: customerName,
      email: `${customerName.toLowerCase().replace(/\s/g, '.')}@example.com`,
      telegram: order.customerTelegram,
      totalOrders: 0,
      ltv: 0,
      lastOrderDate: '1970-01-01',
      avatar: `https://i.pravatar.cc/40?u=${customerName}`
    });
  }

  const currentCustomer = customerData.get(customerName)!;
  currentCustomer.totalOrders += 1;
  currentCustomer.ltv += order.jumlah_transfer;
  if (order.timestamp > currentCustomer.lastOrderDate) {
    currentCustomer.lastOrderDate = order.timestamp;
  }
});

export const mockCustomers: CustomerProfile[] = Array.from(customerData.values());

export const mockPromos: Promo[] = [
  {
    id: 'p1',
    productName: 'Desain Konten Carousel',
    promoText: '20% OFF',
    period: '1-31 Des',
    status: 'Aktif',
  },
  {
    id: 'p2',
    productName: 'Desain Kartu Nama',
    promoText: 'Buy 2 Get 1',
    period: '15-25 Des',
    status: 'Aktif',
  },
  {
    id: 'p3',
    productName: 'Desain X-Banner',
    promoText: '15% OFF',
    period: '1-15 Jan',
    status: 'Draft',
  },
];

export const mockCoupons: Coupon[] = [
  {
    id: 'c1',
    code: 'NEWBIE20',
    discount: '20%',
    usage: '15/50',
    period: '1-31 Des',
    status: 'Aktif',
  },
  {
    id: 'c2',
    code: 'LOYAL50',
    discount: 'Rp 50.000',
    usage: '3/10',
    period: '1-15 Jan',
    status: 'Aktif',
  },
  {
    id: 'c3',
    code: 'XMAS2024',
    discount: '25%',
    usage: '0/100',
    period: '20-26 Des',
    status: 'Draft',
  },
  {
    id: 'c4',
    code: 'FLASH1212',
    discount: 'Rp 12.000',
    usage: '100/100',
    period: '12 Des',
    status: 'Expired',
  },
];

export const mockBanners: Banner[] = [
  {
    id: 'b1',
    name: 'Promo Akhir Tahun',
    position: 'Top Banner',
    period: '1-31 Des',
    status: 'Aktif',
    type: 'Image',
    image: 'https://placehold.co/1200x200.png',
    dataAiHint: 'sale banner',
    content: 'Promo diskon akhir tahun untuk semua layanan desain grafis.',
    href: '#catalog-section'
  },
  {
    id: 'b2',
    name: 'Branding UMKM',
    position: 'Top Banner',
    period: 'Bulan Ini',
    status: 'Aktif',
    type: 'Image',
    image: 'https://placehold.co/1200x200.png',
    dataAiHint: 'business branding',
    content: 'Tingkatkan brand UMKM Anda dengan paket branding lengkap dari kami.',
    href: '#catalog-section'
  },
  {
    id: 'b3',
    name: 'Desain Konten Medsos',
    position: 'Top Banner',
    period: 'Bulan Ini',
    status: 'Aktif',
    type: 'Image',
    image: 'https://placehold.co/1200x200.png',
    dataAiHint: 'social media design',
    content: 'Buat konten media sosial Anda lebih menarik dengan desain profesional.',
    href: '#catalog-section'
  },
  {
    id: 'b4',
    name: 'Kupon Bulan Depan',
    position: 'Info Card',
    period: 'Ongoing',
    status: 'Aktif',
    type: 'Text',
    icon: 'Gift',
    image: 'https://placehold.co/400x400.png',
    dataAiHint: 'coupon gift',
    content: 'Siap-siap! Bulan depan akan ada kupon spesial untuk pelanggan setia. Pastikan Anda sudah terdaftar di program loyalitas kami.',
    href: '#'
  },
  {
    id: 'b5',
    name: 'Promo Akhir Pekan',
    position: 'Info Card',
    period: 'Weekend',
    status: 'Aktif',
    type: 'Text',
    icon: 'Percent',
    image: 'https://placehold.co/400x400.png',
    dataAiHint: 'special offer',
    content: 'Dapatkan diskon tambahan 10% untuk semua desain konten media sosial setiap akhir pekan. Hubungi kami untuk info lebih lanjut!',
    href: '#'
  }
];

export const mockAdminUsers: AdminUser[] = [
  {
    id: 'user-1',
    name: 'Admin Utama',
    email: 'admin@designflow.com',
    role: 'Admin',
    status: 'Active',
    avatar: 'https://placehold.co/40x40.png'
  },
  {
    id: 'user-2',
    name: 'Desainer Hebat',
    email: 'desainer@designflow.com',
    role: 'Designer',
    status: 'Active',
    avatar: 'https://placehold.co/40x40.png'
  },
  {
    id: 'user-3',
    name: 'Marketer Pro',
    email: 'marketing@designflow.com',
    role: 'Marketing',
    status: 'Active',
    avatar: 'https://placehold.co/40x40.png'
  },
  {
    id: 'user-4',
    name: 'User Nonaktif',
    email: 'nonaktif@designflow.com',
    role: 'Designer',
    status: 'Inactive',
    avatar: 'https://placehold.co/40x40.png'
  }
];

export const mockDriveActivityLogs: DriveActivityLog[] = [
  { id: 'd1', orderId: '#002', activity: 'Folder Created', timestamp: '2024-05-22 10:05 AM', user: 'System' },
  { id: 'd2', orderId: '#002', activity: 'File Uploaded: initial_brief.pdf', timestamp: '2024-05-22 10:06 AM', user: 'System' },
  { id: 'd3', orderId: '#003', activity: 'Folder Created', timestamp: '2024-05-23 09:00 AM', user: 'System' },
  { id: 'd4', orderId: '#004', activity: 'Folder Created', timestamp: '2024-05-24 11:30 AM', user: 'System' },
  { id: 'd5', orderId: '#004', activity: 'File Uploaded: final_assets.zip', timestamp: '2024-05-25 04:15 PM', user: 'Admin' },
];

export const mockCalendarActivityLogs: CalendarActivityLog[] = [
  { id: 'c1', orderId: '#002', activity: 'Event Created: "Deadline: Social Media Post..."', timestamp: '2024-05-22 10:10 AM', trigger: 'Order Status Change' },
  { id: 'c2', orderId: '#003', activity: 'Event Created: "Deadline: Packaging Design..."', timestamp: '2024-05-23 09:05 AM', trigger: 'Order Status Change' },
  { id: 'c3', orderId: '#003', activity: 'Event Created: "Meeting: DesignFlow - Bob..."', timestamp: '2024-05-23 09:30 AM', trigger: 'Manual Scheduling' },
  { id: 'c4', orderId: '#004', activity: 'Event Created: "Deadline: Banner/Spanduk..."', timestamp: '2024-05-24 11:35 AM', trigger: 'Order Status Change' },
];

export const mockMeetActivityLogs: MeetActivityLog[] = [
  { id: 'm1', orderId: '#003', activity: 'Meeting Scheduled: "Konsultasi Revisi..."', timestamp: '2024-05-23 10:00 AM', trigger: 'Revisi > 2x' },
  { id: 'm2', orderId: '#001', activity: 'Meeting Scheduled: "Kickoff Meeting..."', timestamp: '2024-05-20 11:00 AM', trigger: 'Pesanan Baru' },
];
---
--- FILE: src/lib/types.ts ---
export type BudgetTier = 'kaki-lima' | 'umkm' | 'e-comm';

export type BudgetItem = {
  id: BudgetTier;
  title: string;
  description: string;
  image: string;
};

export type Service = {
  id: string;
  name: string;
  prices: { [key in BudgetTier]: number };
  tierImages: { [key in BudgetTier]: string };
  image: string;
  category: string;
  dataAiHint: string;
};

export type CartItem = {
  id: string;
  name:string;
  price: number;
  quantity: number;
  brief: Record<string, string>;
  image: string;
  budgetTier: BudgetTier;
  budgetName: string;
};

export type Customer = {
  name: string;
  phone: string;
  telegram: string;
};

export type OrderStatus =
  | 'Menunggu Pembayaran'
  | 'Masuk Antrian'
  | 'Masuk Antrian (Minggu Depan)'
  | 'Sedang Direvisi'
  | 'Menunggu Respon Klien'
  | 'Selesai'
  | 'Dibatalkan (Belum Dikerjakan)'
  | 'Dibatalkan (Sudah Dikerjakan)'
  | 'Tidak Puas (Refund 50%)'
  | 'Ditutup (Tanpa Refund)'
  | 'Perlu Tinjauan Owner'
  | 'Sedang Dikerjakan'
  | 'Siap Kirim Pratinjau'
  | 'Eskalasi: Revisi di Luar Lingkup';

// Struktur data baru sesuai spesifikasi
export type Order = {
  kode_order: string;
  nama_klien: string;
  status_pesanan: OrderStatus;
  tipe_pembayaran: 'DP' | 'LUNAS';
  jumlah_transfer: number;
  total_harga: number;
  potongan_refund: number;
  jenis_potongan: string;
  total_refund: number;
  status_refund: 'Sudah' | 'Belum' | '';
  log_aktivitas: {
    aksi: string;
    oleh: 'klien' | 'owner' | 'desainer' | 'sistem';
    waktu: string;
  }[];
  timestamp: string;

  // Fields tambahan yang diperlukan oleh UI
  customerTelegram: string;
  items: {
    name: string;
    quantity: number;
    price: number;
    brief: Record<string, string>;
  }[];
  budget: 'Kaki Lima' | 'UMKM' | 'E-Comm';
  pekan: 'W1' | 'W2' | 'W3' | 'W4';
  driveFolderUrl?: string;
  paymentStatus: string;
};


export type Promo = {
  id: string;
  productName: string;
  promoText: string;
  period: string;
  status: 'Aktif' | 'Draft' | 'Selesai';
};

export type Coupon = {
  id: string;
  code: string;
  discount: string;
  usage: string;
  period: string;
  status: 'Aktif' | 'Draft' | 'Expired';
};

export type Banner = {
  id: string;
  name: string;
  position: 'Top Banner' | 'Hero Section' | 'Popup' | 'Footer' | 'Info Card';
  period: string;
  status: 'Aktif' | 'Draft' | 'Selesai';
  image?: string;
  icon?: string;
  dataAiHint?: string;
  content: string;
  type: 'Image' | 'Text';
  href?: string;
};

export type AdminUser = {
  id: string;
  name: string;
  email: string;
  role: 'Admin' | 'Designer' | 'Marketing';
  status: 'Active' | 'Inactive';
  avatar: string;
};

export type CustomerProfile = {
  id: string;
  name: string;
  email: string;
  telegram: string;
  avatar: string;
  totalOrders: number;
  ltv: number; // Lifetime Value
  lastOrderDate: string;
};

export type DriveActivityLog = {
  id: string;
  orderId: string;
  activity: string;
  timestamp: string;
  user: string;
};

export type CalendarActivityLog = {
  id: string;
  orderId: string;
  activity: string;
  timestamp: string;
  trigger: string;
};

export type MeetActivityLog = {
  id: string;
  orderId: string;
  activity: string;
  timestamp: string;
  trigger: string;
};

export type Category = {
  id: string;
  name: string;
};
---
--- FILE: src/lib/utils.ts ---
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatRupiah(amount: number) {
  return new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
}
---
--- FILE: tailwind.config.ts ---
import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        body: ['var(--font-inter)', 'sans-serif'],
        headline: ['var(--font-poppins)', 'sans-serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
        sidebar: {
          DEFAULT: 'hsl(var(--sidebar-background))',
          foreground: 'hsl(var(--sidebar-foreground))',
          primary: 'hsl(var(--sidebar-primary))',
          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
          accent: 'hsl(var(--sidebar-accent))',
          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
          border: 'hsl(var(--sidebar-border))',
          ring: 'hsl(var(--sidebar-ring))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;
---
--- FILE: tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
---
--- FILE: workspace/.env ---
---
--- FILE: workspace/src/ai/genkit.ts ---
import {genkit, type GenkitPlugin} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

const plugins: GenkitPlugin[] = [];

// The googleAI() plugin is conditionally enabled to prevent startup errors.
// To use generative AI features, you must:
// 1. Get a Google AI API key from https://aistudio.google.com/app/apikey
// 2. Add it to the .env file as: GEMINI_API_KEY="YOUR_API_KEY_HERE"
// The application will run without the key, but AI features will be disabled.
if (process.env.GEMINI_API_KEY) {
  plugins.push(googleAI());
}

export const ai = genkit({
  plugins,
});
---
